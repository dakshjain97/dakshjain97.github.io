---
layout: post
title: Prediction of order returns for fashion category
subtitle: 
cover-img: 
thumbnail-img: 
share-img: 
tags: [classification, supervised learning]
author: Daksh Jain
---

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "QFnMamqY2Ed2"
   },
   "outputs": [],
   "source": [
    "#Importing Libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "from matplotlib import pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.feature_selection import RFECV\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import recall_score\n",
    "from sklearn.metrics import precision_score\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.metrics import classification_report\n",
    "import pickle\n",
    "import warnings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "id": "Oe1i1chS5KI1"
   },
   "outputs": [],
   "source": [
    "#Jupyter Notebook Settings\n",
    "warnings.filterwarnings('ignore')\n",
    "pd.options.display.max_columns=None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Path for Folder where all input files and model files are kept\n",
    "path='C:/Users/daksh/OneDrive/Desktop/Mywork/Interview/TelePerformance/Case_Study_Teleperformance/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "id": "68f2xsuR2Ed7"
   },
   "outputs": [],
   "source": [
    "#Reading Data for Training\n",
    "data=pd.read_csv(path+'Input_Data/TrainingData_V1.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "JfccAa_a2Ed8",
    "outputId": "072d683d-decf-463f-f143-f2e4543c3d95"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(79945, 14)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking Shape of Data\n",
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 292
    },
    "id": "c8lpEyCo2Ed9",
    "outputId": "8e01c776-ea55-4b4f-85a1-56b70c6d81f1"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_item_id</th>\n",
       "      <th>order_date</th>\n",
       "      <th>delivery_date</th>\n",
       "      <th>item_id</th>\n",
       "      <th>item_size</th>\n",
       "      <th>item_color</th>\n",
       "      <th>brand_id</th>\n",
       "      <th>item_price</th>\n",
       "      <th>user_id</th>\n",
       "      <th>user_title</th>\n",
       "      <th>user_dob</th>\n",
       "      <th>user_state</th>\n",
       "      <th>user_reg_date</th>\n",
       "      <th>return</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>22-06-2016</td>\n",
       "      <td>27-06-2016</td>\n",
       "      <td>643</td>\n",
       "      <td>38</td>\n",
       "      <td>navy</td>\n",
       "      <td>30</td>\n",
       "      <td>49.9</td>\n",
       "      <td>30822</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>17-04-1969</td>\n",
       "      <td>1013</td>\n",
       "      <td>23-06-2016</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10</td>\n",
       "      <td>22-06-2016</td>\n",
       "      <td>27-06-2016</td>\n",
       "      <td>195</td>\n",
       "      <td>xxl</td>\n",
       "      <td>grey</td>\n",
       "      <td>46</td>\n",
       "      <td>19.9</td>\n",
       "      <td>30823</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>22-04-1970</td>\n",
       "      <td>1001</td>\n",
       "      <td>15-03-2015</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11</td>\n",
       "      <td>22-06-2016</td>\n",
       "      <td>05-07-2016</td>\n",
       "      <td>25</td>\n",
       "      <td>xxl</td>\n",
       "      <td>grey</td>\n",
       "      <td>5</td>\n",
       "      <td>79.9</td>\n",
       "      <td>30823</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>22-04-1970</td>\n",
       "      <td>1001</td>\n",
       "      <td>15-03-2015</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>32</td>\n",
       "      <td>23-06-2016</td>\n",
       "      <td>26-06-2016</td>\n",
       "      <td>173</td>\n",
       "      <td>m</td>\n",
       "      <td>brown</td>\n",
       "      <td>20</td>\n",
       "      <td>19.9</td>\n",
       "      <td>17234</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>09-01-1960</td>\n",
       "      <td>1013</td>\n",
       "      <td>17-02-2015</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>43</td>\n",
       "      <td>23-06-2016</td>\n",
       "      <td>26-06-2016</td>\n",
       "      <td>394</td>\n",
       "      <td>40</td>\n",
       "      <td>black</td>\n",
       "      <td>44</td>\n",
       "      <td>90.0</td>\n",
       "      <td>30827</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1006</td>\n",
       "      <td>09-02-2016</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   order_item_id  order_date delivery_date  item_id item_size item_color  \\\n",
       "0              1  22-06-2016    27-06-2016      643        38       navy   \n",
       "1             10  22-06-2016    27-06-2016      195       xxl       grey   \n",
       "2             11  22-06-2016    05-07-2016       25       xxl       grey   \n",
       "3             32  23-06-2016    26-06-2016      173         m      brown   \n",
       "4             43  23-06-2016    26-06-2016      394        40      black   \n",
       "\n",
       "   brand_id  item_price  user_id user_title    user_dob  user_state  \\\n",
       "0        30        49.9    30822        Mrs  17-04-1969        1013   \n",
       "1        46        19.9    30823        Mrs  22-04-1970        1001   \n",
       "2         5        79.9    30823        Mrs  22-04-1970        1001   \n",
       "3        20        19.9    17234        Mrs  09-01-1960        1013   \n",
       "4        44        90.0    30827        Mrs         NaN        1006   \n",
       "\n",
       "  user_reg_date  return  \n",
       "0    23-06-2016       0  \n",
       "1    15-03-2015       1  \n",
       "2    15-03-2015       0  \n",
       "3    17-02-2015       0  \n",
       "4    09-02-2016       1  "
      ]
     },
     "execution_count": 4,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "DvKQlGOM2Ed-",
    "outputId": "dbda6f90-2f03-4783-c7da-b32f6527f278"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "order_item_id      int64\n",
       "order_date        object\n",
       "delivery_date     object\n",
       "item_id            int64\n",
       "item_size         object\n",
       "item_color        object\n",
       "brand_id           int64\n",
       "item_price       float64\n",
       "user_id            int64\n",
       "user_title        object\n",
       "user_dob          object\n",
       "user_state         int64\n",
       "user_reg_date     object\n",
       "return             int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 5,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking Data Types\n",
    "data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "id": "mBGeJvz42Ed_"
   },
   "outputs": [],
   "source": [
    "#Converting date objects to datetime\n",
    "data['order_date']=pd.to_datetime(data['order_date'],errors='coerce',format='%d-%m-%Y')\n",
    "data['delivery_date']=pd.to_datetime(data['delivery_date'],errors='coerce',format='%d-%m-%Y')\n",
    "data['user_dob']=pd.to_datetime(data['user_dob'],errors='coerce',format='%d-%m-%Y')\n",
    "data['user_reg_date']=pd.to_datetime(data['user_reg_date'],errors='coerce',format='%d-%m-%Y')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "J2wpzbGF2Ed_",
    "outputId": "cf6b2c28-f103-4fe3-9261-1e41fd7b6d5a"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "order_item_id             int64\n",
       "order_date       datetime64[ns]\n",
       "delivery_date    datetime64[ns]\n",
       "item_id                   int64\n",
       "item_size                object\n",
       "item_color               object\n",
       "brand_id                  int64\n",
       "item_price              float64\n",
       "user_id                   int64\n",
       "user_title               object\n",
       "user_dob         datetime64[ns]\n",
       "user_state                int64\n",
       "user_reg_date    datetime64[ns]\n",
       "return                    int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 7,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "m3lKWfwd2EeA"
   },
   "source": [
    "# Checking Data Anomalies/Data Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "id": "_g9ewRdk2EeA"
   },
   "outputs": [],
   "source": [
    "#Sorting Data by primary key order item id\n",
    "data.sort_values(['order_item_id']).reset_index(drop=True,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 292
    },
    "id": "RV4S9gVg2EeA",
    "outputId": "fd835019-4e57-4517-d177-3a57d2dbfc91"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_item_id</th>\n",
       "      <th>order_date</th>\n",
       "      <th>delivery_date</th>\n",
       "      <th>item_id</th>\n",
       "      <th>item_size</th>\n",
       "      <th>item_color</th>\n",
       "      <th>brand_id</th>\n",
       "      <th>item_price</th>\n",
       "      <th>user_id</th>\n",
       "      <th>user_title</th>\n",
       "      <th>user_dob</th>\n",
       "      <th>user_state</th>\n",
       "      <th>user_reg_date</th>\n",
       "      <th>return</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-06-22</td>\n",
       "      <td>2016-06-27</td>\n",
       "      <td>643</td>\n",
       "      <td>38</td>\n",
       "      <td>navy</td>\n",
       "      <td>30</td>\n",
       "      <td>49.9</td>\n",
       "      <td>30822</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1969-04-17</td>\n",
       "      <td>1013</td>\n",
       "      <td>2016-06-23</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10</td>\n",
       "      <td>2016-06-22</td>\n",
       "      <td>2016-06-27</td>\n",
       "      <td>195</td>\n",
       "      <td>xxl</td>\n",
       "      <td>grey</td>\n",
       "      <td>46</td>\n",
       "      <td>19.9</td>\n",
       "      <td>30823</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1970-04-22</td>\n",
       "      <td>1001</td>\n",
       "      <td>2015-03-15</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11</td>\n",
       "      <td>2016-06-22</td>\n",
       "      <td>2016-07-05</td>\n",
       "      <td>25</td>\n",
       "      <td>xxl</td>\n",
       "      <td>grey</td>\n",
       "      <td>5</td>\n",
       "      <td>79.9</td>\n",
       "      <td>30823</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1970-04-22</td>\n",
       "      <td>1001</td>\n",
       "      <td>2015-03-15</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>32</td>\n",
       "      <td>2016-06-23</td>\n",
       "      <td>2016-06-26</td>\n",
       "      <td>173</td>\n",
       "      <td>m</td>\n",
       "      <td>brown</td>\n",
       "      <td>20</td>\n",
       "      <td>19.9</td>\n",
       "      <td>17234</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1960-01-09</td>\n",
       "      <td>1013</td>\n",
       "      <td>2015-02-17</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>43</td>\n",
       "      <td>2016-06-23</td>\n",
       "      <td>2016-06-26</td>\n",
       "      <td>394</td>\n",
       "      <td>40</td>\n",
       "      <td>black</td>\n",
       "      <td>44</td>\n",
       "      <td>90.0</td>\n",
       "      <td>30827</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>NaT</td>\n",
       "      <td>1006</td>\n",
       "      <td>2016-02-09</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   order_item_id order_date delivery_date  item_id item_size item_color  \\\n",
       "0              1 2016-06-22    2016-06-27      643        38       navy   \n",
       "1             10 2016-06-22    2016-06-27      195       xxl       grey   \n",
       "2             11 2016-06-22    2016-07-05       25       xxl       grey   \n",
       "3             32 2016-06-23    2016-06-26      173         m      brown   \n",
       "4             43 2016-06-23    2016-06-26      394        40      black   \n",
       "\n",
       "   brand_id  item_price  user_id user_title   user_dob  user_state  \\\n",
       "0        30        49.9    30822        Mrs 1969-04-17        1013   \n",
       "1        46        19.9    30823        Mrs 1970-04-22        1001   \n",
       "2         5        79.9    30823        Mrs 1970-04-22        1001   \n",
       "3        20        19.9    17234        Mrs 1960-01-09        1013   \n",
       "4        44        90.0    30827        Mrs        NaT        1006   \n",
       "\n",
       "  user_reg_date  return  \n",
       "0    2016-06-23       0  \n",
       "1    2015-03-15       1  \n",
       "2    2015-03-15       0  \n",
       "3    2015-02-17       0  \n",
       "4    2016-02-09       1  "
      ]
     },
     "execution_count": 9,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "TyIAGBwr2EeB",
    "outputId": "aee408a7-48fd-41fe-ef95-51ad42de5788"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(79945, 14)"
      ]
     },
     "execution_count": 10,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#No Duplicates Found\n",
    "data.drop_duplicates().shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 69
    },
    "id": "-9LuW3q02EeB",
    "outputId": "aac55792-090c-47ea-b51c-be19ad14e274"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_item_id</th>\n",
       "      <th>order_date</th>\n",
       "      <th>delivery_date</th>\n",
       "      <th>item_id</th>\n",
       "      <th>item_size</th>\n",
       "      <th>item_color</th>\n",
       "      <th>brand_id</th>\n",
       "      <th>item_price</th>\n",
       "      <th>user_id</th>\n",
       "      <th>user_title</th>\n",
       "      <th>user_dob</th>\n",
       "      <th>user_state</th>\n",
       "      <th>user_reg_date</th>\n",
       "      <th>return</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [order_item_id, order_date, delivery_date, item_id, item_size, item_color, brand_id, item_price, user_id, user_title, user_dob, user_state, user_reg_date, return]\n",
       "Index: []"
      ]
     },
     "execution_count": 11,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#No duplicates on primary key\n",
    "data[data['order_item_id'].duplicated()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 69
    },
    "id": "sqfa7AAO2EeC",
    "outputId": "5fba9805-c73c-46f5-a6c4-fedc1af46a5a"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_item_id</th>\n",
       "      <th>order_date</th>\n",
       "      <th>delivery_date</th>\n",
       "      <th>item_id</th>\n",
       "      <th>item_size</th>\n",
       "      <th>item_color</th>\n",
       "      <th>brand_id</th>\n",
       "      <th>item_price</th>\n",
       "      <th>user_id</th>\n",
       "      <th>user_title</th>\n",
       "      <th>user_dob</th>\n",
       "      <th>user_state</th>\n",
       "      <th>user_reg_date</th>\n",
       "      <th>return</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [order_item_id, order_date, delivery_date, item_id, item_size, item_color, brand_id, item_price, user_id, user_title, user_dob, user_state, user_reg_date, return]\n",
       "Index: []"
      ]
     },
     "execution_count": 12,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking cases where user dob could be wrong\n",
    "data[(data['user_dob']>data['delivery_date']) | (data['user_dob']>data['order_date']) | (data['user_dob']>data['user_reg_date'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 592
    },
    "id": "4It-bGj32EeC",
    "outputId": "5ce78ec8-d601-42c5-eb4a-3afe834efff2"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_item_id</th>\n",
       "      <th>order_date</th>\n",
       "      <th>delivery_date</th>\n",
       "      <th>item_id</th>\n",
       "      <th>item_size</th>\n",
       "      <th>item_color</th>\n",
       "      <th>brand_id</th>\n",
       "      <th>item_price</th>\n",
       "      <th>user_id</th>\n",
       "      <th>user_title</th>\n",
       "      <th>user_dob</th>\n",
       "      <th>user_state</th>\n",
       "      <th>user_reg_date</th>\n",
       "      <th>return</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-06-22</td>\n",
       "      <td>2016-06-27</td>\n",
       "      <td>643</td>\n",
       "      <td>38</td>\n",
       "      <td>navy</td>\n",
       "      <td>30</td>\n",
       "      <td>49.90</td>\n",
       "      <td>30822</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1969-04-17</td>\n",
       "      <td>1013</td>\n",
       "      <td>2016-06-23</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>111</td>\n",
       "      <td>2016-06-23</td>\n",
       "      <td>2016-06-27</td>\n",
       "      <td>166</td>\n",
       "      <td>38</td>\n",
       "      <td>white</td>\n",
       "      <td>6</td>\n",
       "      <td>69.90</td>\n",
       "      <td>30837</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1963-02-28</td>\n",
       "      <td>1002</td>\n",
       "      <td>2016-06-24</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>235</td>\n",
       "      <td>2016-06-23</td>\n",
       "      <td>2016-06-27</td>\n",
       "      <td>262</td>\n",
       "      <td>40</td>\n",
       "      <td>black</td>\n",
       "      <td>12</td>\n",
       "      <td>69.90</td>\n",
       "      <td>30856</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1968-06-30</td>\n",
       "      <td>1002</td>\n",
       "      <td>2016-06-24</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>307</td>\n",
       "      <td>2016-06-23</td>\n",
       "      <td>NaT</td>\n",
       "      <td>68</td>\n",
       "      <td>m</td>\n",
       "      <td>purple</td>\n",
       "      <td>3</td>\n",
       "      <td>19.90</td>\n",
       "      <td>30870</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1958-11-20</td>\n",
       "      <td>1016</td>\n",
       "      <td>2016-06-24</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>429</td>\n",
       "      <td>2016-06-23</td>\n",
       "      <td>2016-06-27</td>\n",
       "      <td>405</td>\n",
       "      <td>41</td>\n",
       "      <td>green</td>\n",
       "      <td>18</td>\n",
       "      <td>79.90</td>\n",
       "      <td>30892</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1966-05-10</td>\n",
       "      <td>1002</td>\n",
       "      <td>2016-06-24</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79919</th>\n",
       "      <td>99640</td>\n",
       "      <td>2016-09-10</td>\n",
       "      <td>2016-09-13</td>\n",
       "      <td>71</td>\n",
       "      <td>7</td>\n",
       "      <td>black</td>\n",
       "      <td>21</td>\n",
       "      <td>49.95</td>\n",
       "      <td>48171</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1971-09-12</td>\n",
       "      <td>1002</td>\n",
       "      <td>2016-09-11</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79930</th>\n",
       "      <td>99814</td>\n",
       "      <td>2016-09-11</td>\n",
       "      <td>2016-09-13</td>\n",
       "      <td>166</td>\n",
       "      <td>38</td>\n",
       "      <td>ocher</td>\n",
       "      <td>6</td>\n",
       "      <td>39.90</td>\n",
       "      <td>48212</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>NaT</td>\n",
       "      <td>1002</td>\n",
       "      <td>2016-09-12</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79937</th>\n",
       "      <td>99895</td>\n",
       "      <td>2016-09-11</td>\n",
       "      <td>2016-09-13</td>\n",
       "      <td>98</td>\n",
       "      <td>l</td>\n",
       "      <td>green</td>\n",
       "      <td>28</td>\n",
       "      <td>49.90</td>\n",
       "      <td>48226</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1973-11-25</td>\n",
       "      <td>1003</td>\n",
       "      <td>2016-09-12</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79940</th>\n",
       "      <td>99942</td>\n",
       "      <td>2016-09-11</td>\n",
       "      <td>2016-09-12</td>\n",
       "      <td>39</td>\n",
       "      <td>41</td>\n",
       "      <td>blue</td>\n",
       "      <td>26</td>\n",
       "      <td>89.90</td>\n",
       "      <td>48232</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1941-10-24</td>\n",
       "      <td>1007</td>\n",
       "      <td>2016-09-12</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79941</th>\n",
       "      <td>99954</td>\n",
       "      <td>2016-09-11</td>\n",
       "      <td>NaT</td>\n",
       "      <td>1498</td>\n",
       "      <td>42</td>\n",
       "      <td>green</td>\n",
       "      <td>6</td>\n",
       "      <td>59.90</td>\n",
       "      <td>48234</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1962-10-02</td>\n",
       "      <td>1007</td>\n",
       "      <td>2016-09-12</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>16688 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       order_item_id order_date delivery_date  item_id item_size item_color  \\\n",
       "0                  1 2016-06-22    2016-06-27      643        38       navy   \n",
       "10               111 2016-06-23    2016-06-27      166        38      white   \n",
       "21               235 2016-06-23    2016-06-27      262        40      black   \n",
       "32               307 2016-06-23           NaT       68         m     purple   \n",
       "45               429 2016-06-23    2016-06-27      405        41      green   \n",
       "...              ...        ...           ...      ...       ...        ...   \n",
       "79919          99640 2016-09-10    2016-09-13       71         7      black   \n",
       "79930          99814 2016-09-11    2016-09-13      166        38      ocher   \n",
       "79937          99895 2016-09-11    2016-09-13       98         l      green   \n",
       "79940          99942 2016-09-11    2016-09-12       39        41       blue   \n",
       "79941          99954 2016-09-11           NaT     1498        42      green   \n",
       "\n",
       "       brand_id  item_price  user_id user_title   user_dob  user_state  \\\n",
       "0            30       49.90    30822        Mrs 1969-04-17        1013   \n",
       "10            6       69.90    30837        Mrs 1963-02-28        1002   \n",
       "21           12       69.90    30856        Mrs 1968-06-30        1002   \n",
       "32            3       19.90    30870        Mrs 1958-11-20        1016   \n",
       "45           18       79.90    30892        Mrs 1966-05-10        1002   \n",
       "...         ...         ...      ...        ...        ...         ...   \n",
       "79919        21       49.95    48171        Mrs 1971-09-12        1002   \n",
       "79930         6       39.90    48212        Mrs        NaT        1002   \n",
       "79937        28       49.90    48226        Mrs 1973-11-25        1003   \n",
       "79940        26       89.90    48232        Mrs 1941-10-24        1007   \n",
       "79941         6       59.90    48234        Mrs 1962-10-02        1007   \n",
       "\n",
       "      user_reg_date  return  \n",
       "0        2016-06-23       0  \n",
       "10       2016-06-24       1  \n",
       "21       2016-06-24       1  \n",
       "32       2016-06-24       0  \n",
       "45       2016-06-24       1  \n",
       "...             ...     ...  \n",
       "79919    2016-09-11       1  \n",
       "79930    2016-09-12       0  \n",
       "79937    2016-09-12       0  \n",
       "79940    2016-09-12       1  \n",
       "79941    2016-09-12       0  \n",
       "\n",
       "[16688 rows x 14 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking Cases where user registration date could be wrong , for these case ill create a flag\n",
    "#because user regristraion date cannot be greater than order or delivery date\n",
    "data[(data['user_reg_date']>data['delivery_date']) | (data['user_reg_date']>data['order_date'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 592
    },
    "id": "1X3BPd5L2EeD",
    "outputId": "ef7cd4a4-76b9-4c36-d301-ab320dd6e8d4"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_item_id</th>\n",
       "      <th>order_date</th>\n",
       "      <th>delivery_date</th>\n",
       "      <th>item_id</th>\n",
       "      <th>item_size</th>\n",
       "      <th>item_color</th>\n",
       "      <th>brand_id</th>\n",
       "      <th>item_price</th>\n",
       "      <th>user_id</th>\n",
       "      <th>user_title</th>\n",
       "      <th>user_dob</th>\n",
       "      <th>user_state</th>\n",
       "      <th>user_reg_date</th>\n",
       "      <th>return</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>312</th>\n",
       "      <td>3141</td>\n",
       "      <td>2016-06-25</td>\n",
       "      <td>1994-12-31</td>\n",
       "      <td>32</td>\n",
       "      <td>l</td>\n",
       "      <td>red</td>\n",
       "      <td>3</td>\n",
       "      <td>21.90</td>\n",
       "      <td>598</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1970-05-08</td>\n",
       "      <td>1003</td>\n",
       "      <td>2015-02-17</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>431</th>\n",
       "      <td>4377</td>\n",
       "      <td>2016-06-26</td>\n",
       "      <td>1994-12-31</td>\n",
       "      <td>126</td>\n",
       "      <td>6+</td>\n",
       "      <td>red</td>\n",
       "      <td>21</td>\n",
       "      <td>39.95</td>\n",
       "      <td>31734</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1965-06-15</td>\n",
       "      <td>1008</td>\n",
       "      <td>2016-02-16</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>498</th>\n",
       "      <td>5244</td>\n",
       "      <td>2016-06-27</td>\n",
       "      <td>1994-12-31</td>\n",
       "      <td>27</td>\n",
       "      <td>5</td>\n",
       "      <td>brown</td>\n",
       "      <td>19</td>\n",
       "      <td>39.90</td>\n",
       "      <td>31858</td>\n",
       "      <td>Mr</td>\n",
       "      <td>NaT</td>\n",
       "      <td>1008</td>\n",
       "      <td>2016-06-28</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>609</th>\n",
       "      <td>6348</td>\n",
       "      <td>2016-06-27</td>\n",
       "      <td>1994-12-31</td>\n",
       "      <td>388</td>\n",
       "      <td>xxl</td>\n",
       "      <td>black</td>\n",
       "      <td>3</td>\n",
       "      <td>49.90</td>\n",
       "      <td>32010</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1973-06-11</td>\n",
       "      <td>1001</td>\n",
       "      <td>2015-02-17</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>610</th>\n",
       "      <td>6350</td>\n",
       "      <td>2016-06-27</td>\n",
       "      <td>1994-12-31</td>\n",
       "      <td>195</td>\n",
       "      <td>xxl</td>\n",
       "      <td>curry</td>\n",
       "      <td>46</td>\n",
       "      <td>9.90</td>\n",
       "      <td>32010</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1973-06-11</td>\n",
       "      <td>1001</td>\n",
       "      <td>2015-02-17</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79626</th>\n",
       "      <td>96777</td>\n",
       "      <td>2016-09-07</td>\n",
       "      <td>1994-12-31</td>\n",
       "      <td>1743</td>\n",
       "      <td>xl</td>\n",
       "      <td>black</td>\n",
       "      <td>20</td>\n",
       "      <td>79.90</td>\n",
       "      <td>47631</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1967-11-30</td>\n",
       "      <td>1008</td>\n",
       "      <td>2016-09-08</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79727</th>\n",
       "      <td>97731</td>\n",
       "      <td>2016-09-09</td>\n",
       "      <td>1994-12-31</td>\n",
       "      <td>2058</td>\n",
       "      <td>5+</td>\n",
       "      <td>grey</td>\n",
       "      <td>4</td>\n",
       "      <td>180.00</td>\n",
       "      <td>47791</td>\n",
       "      <td>Family</td>\n",
       "      <td>1988-01-08</td>\n",
       "      <td>1009</td>\n",
       "      <td>2016-09-10</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79851</th>\n",
       "      <td>98939</td>\n",
       "      <td>2016-09-10</td>\n",
       "      <td>1994-12-31</td>\n",
       "      <td>475</td>\n",
       "      <td>45</td>\n",
       "      <td>grey</td>\n",
       "      <td>1</td>\n",
       "      <td>99.90</td>\n",
       "      <td>48031</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1982-11-08</td>\n",
       "      <td>1006</td>\n",
       "      <td>2016-09-11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79863</th>\n",
       "      <td>99042</td>\n",
       "      <td>2016-09-10</td>\n",
       "      <td>1994-12-31</td>\n",
       "      <td>1670</td>\n",
       "      <td>39</td>\n",
       "      <td>grey</td>\n",
       "      <td>1</td>\n",
       "      <td>184.91</td>\n",
       "      <td>2649</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1979-02-07</td>\n",
       "      <td>1001</td>\n",
       "      <td>2015-06-14</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79887</th>\n",
       "      <td>99368</td>\n",
       "      <td>2016-09-10</td>\n",
       "      <td>1994-12-31</td>\n",
       "      <td>2154</td>\n",
       "      <td>42</td>\n",
       "      <td>grey</td>\n",
       "      <td>7</td>\n",
       "      <td>19.90</td>\n",
       "      <td>48120</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1986-02-22</td>\n",
       "      <td>1008</td>\n",
       "      <td>2016-09-11</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>846 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       order_item_id order_date delivery_date  item_id item_size item_color  \\\n",
       "312             3141 2016-06-25    1994-12-31       32         l        red   \n",
       "431             4377 2016-06-26    1994-12-31      126        6+        red   \n",
       "498             5244 2016-06-27    1994-12-31       27         5      brown   \n",
       "609             6348 2016-06-27    1994-12-31      388       xxl      black   \n",
       "610             6350 2016-06-27    1994-12-31      195       xxl      curry   \n",
       "...              ...        ...           ...      ...       ...        ...   \n",
       "79626          96777 2016-09-07    1994-12-31     1743        xl      black   \n",
       "79727          97731 2016-09-09    1994-12-31     2058        5+       grey   \n",
       "79851          98939 2016-09-10    1994-12-31      475        45       grey   \n",
       "79863          99042 2016-09-10    1994-12-31     1670        39       grey   \n",
       "79887          99368 2016-09-10    1994-12-31     2154        42       grey   \n",
       "\n",
       "       brand_id  item_price  user_id user_title   user_dob  user_state  \\\n",
       "312           3       21.90      598        Mrs 1970-05-08        1003   \n",
       "431          21       39.95    31734        Mrs 1965-06-15        1008   \n",
       "498          19       39.90    31858         Mr        NaT        1008   \n",
       "609           3       49.90    32010        Mrs 1973-06-11        1001   \n",
       "610          46        9.90    32010        Mrs 1973-06-11        1001   \n",
       "...         ...         ...      ...        ...        ...         ...   \n",
       "79626        20       79.90    47631        Mrs 1967-11-30        1008   \n",
       "79727         4      180.00    47791     Family 1988-01-08        1009   \n",
       "79851         1       99.90    48031        Mrs 1982-11-08        1006   \n",
       "79863         1      184.91     2649        Mrs 1979-02-07        1001   \n",
       "79887         7       19.90    48120        Mrs 1986-02-22        1008   \n",
       "\n",
       "      user_reg_date  return  \n",
       "312      2015-02-17       1  \n",
       "431      2016-02-16       1  \n",
       "498      2016-06-28       1  \n",
       "609      2015-02-17       1  \n",
       "610      2015-02-17       1  \n",
       "...             ...     ...  \n",
       "79626    2016-09-08       0  \n",
       "79727    2016-09-10       0  \n",
       "79851    2016-09-11       0  \n",
       "79863    2015-06-14       1  \n",
       "79887    2016-09-11       0  \n",
       "\n",
       "[846 rows x 14 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking Cases where delivery date could be wrong , for these case ill create a flag\n",
    "#because order delivery date cannot be less than order date\n",
    "data[data['delivery_date']<data['order_date']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 69
    },
    "id": "dFGOuxek2EeD",
    "outputId": "46d8f5e6-9b19-4d53-d02f-c117575f93fc"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_item_id</th>\n",
       "      <th>order_date</th>\n",
       "      <th>delivery_date</th>\n",
       "      <th>item_id</th>\n",
       "      <th>item_size</th>\n",
       "      <th>item_color</th>\n",
       "      <th>brand_id</th>\n",
       "      <th>item_price</th>\n",
       "      <th>user_id</th>\n",
       "      <th>user_title</th>\n",
       "      <th>user_dob</th>\n",
       "      <th>user_state</th>\n",
       "      <th>user_reg_date</th>\n",
       "      <th>return</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [order_item_id, order_date, delivery_date, item_id, item_size, item_color, brand_id, item_price, user_id, user_title, user_dob, user_state, user_reg_date, return]\n",
       "Index: []"
      ]
     },
     "execution_count": 15,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#No negative price\n",
    "data[data['item_price']<0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "9f90TKmN2EeE",
    "outputId": "158aa9b3-81e4-46f6-f01c-95565e65498c"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "order_item_id       0\n",
       "order_date          0\n",
       "delivery_date    7436\n",
       "item_id             0\n",
       "item_size           0\n",
       "item_color          0\n",
       "brand_id            0\n",
       "item_price          0\n",
       "user_id             0\n",
       "user_title          0\n",
       "user_dob         6989\n",
       "user_state          0\n",
       "user_reg_date       0\n",
       "return              0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking Missing Values\n",
    "data.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zX1lUDVf2EeE"
   },
   "source": [
    "# Feature Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "id": "mwnUxymI2EeE"
   },
   "outputs": [],
   "source": [
    "#Creating Flag For Data Anomalies\n",
    "#Invalid User Reg Date is a flag to check if registration date of user is not valid\n",
    "#Invalid Delivery Date is a flag to check if delivery data of product is invalid\n",
    "data['Invalid_User_Reg_Date_Flag']=0\n",
    "data['Invalid_Delivery_Date']=0\n",
    "for i in range(0,len(data)):\n",
    "    if ((data.at[i,'user_reg_date']>data.at[i,'delivery_date']) or (data.at[i,'user_reg_date']>data.at[i,'order_date'])):\n",
    "        data.at[i,'Invalid_User_Reg_Date_Flag']=1\n",
    "    if data.at[i,'delivery_date']<data.at[i,'order_date']:\n",
    "        data.at[i,'Invalid_Delivery_Date']=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 592
    },
    "id": "wQmIBZBN2EeF",
    "outputId": "7217d55a-c617-49d4-8dc2-caa08d1ebaf4"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_item_id</th>\n",
       "      <th>order_date</th>\n",
       "      <th>delivery_date</th>\n",
       "      <th>item_id</th>\n",
       "      <th>item_size</th>\n",
       "      <th>item_color</th>\n",
       "      <th>brand_id</th>\n",
       "      <th>item_price</th>\n",
       "      <th>user_id</th>\n",
       "      <th>user_title</th>\n",
       "      <th>user_dob</th>\n",
       "      <th>user_state</th>\n",
       "      <th>user_reg_date</th>\n",
       "      <th>return</th>\n",
       "      <th>Invalid_User_Reg_Date_Flag</th>\n",
       "      <th>Invalid_Delivery_Date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-06-22</td>\n",
       "      <td>2016-06-27</td>\n",
       "      <td>643</td>\n",
       "      <td>38</td>\n",
       "      <td>navy</td>\n",
       "      <td>30</td>\n",
       "      <td>49.90</td>\n",
       "      <td>30822</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1969-04-17</td>\n",
       "      <td>1013</td>\n",
       "      <td>2016-06-23</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>111</td>\n",
       "      <td>2016-06-23</td>\n",
       "      <td>2016-06-27</td>\n",
       "      <td>166</td>\n",
       "      <td>38</td>\n",
       "      <td>white</td>\n",
       "      <td>6</td>\n",
       "      <td>69.90</td>\n",
       "      <td>30837</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1963-02-28</td>\n",
       "      <td>1002</td>\n",
       "      <td>2016-06-24</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>235</td>\n",
       "      <td>2016-06-23</td>\n",
       "      <td>2016-06-27</td>\n",
       "      <td>262</td>\n",
       "      <td>40</td>\n",
       "      <td>black</td>\n",
       "      <td>12</td>\n",
       "      <td>69.90</td>\n",
       "      <td>30856</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1968-06-30</td>\n",
       "      <td>1002</td>\n",
       "      <td>2016-06-24</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>307</td>\n",
       "      <td>2016-06-23</td>\n",
       "      <td>NaT</td>\n",
       "      <td>68</td>\n",
       "      <td>m</td>\n",
       "      <td>purple</td>\n",
       "      <td>3</td>\n",
       "      <td>19.90</td>\n",
       "      <td>30870</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1958-11-20</td>\n",
       "      <td>1016</td>\n",
       "      <td>2016-06-24</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>429</td>\n",
       "      <td>2016-06-23</td>\n",
       "      <td>2016-06-27</td>\n",
       "      <td>405</td>\n",
       "      <td>41</td>\n",
       "      <td>green</td>\n",
       "      <td>18</td>\n",
       "      <td>79.90</td>\n",
       "      <td>30892</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1966-05-10</td>\n",
       "      <td>1002</td>\n",
       "      <td>2016-06-24</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79919</th>\n",
       "      <td>99640</td>\n",
       "      <td>2016-09-10</td>\n",
       "      <td>2016-09-13</td>\n",
       "      <td>71</td>\n",
       "      <td>7</td>\n",
       "      <td>black</td>\n",
       "      <td>21</td>\n",
       "      <td>49.95</td>\n",
       "      <td>48171</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1971-09-12</td>\n",
       "      <td>1002</td>\n",
       "      <td>2016-09-11</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79930</th>\n",
       "      <td>99814</td>\n",
       "      <td>2016-09-11</td>\n",
       "      <td>2016-09-13</td>\n",
       "      <td>166</td>\n",
       "      <td>38</td>\n",
       "      <td>ocher</td>\n",
       "      <td>6</td>\n",
       "      <td>39.90</td>\n",
       "      <td>48212</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>NaT</td>\n",
       "      <td>1002</td>\n",
       "      <td>2016-09-12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79937</th>\n",
       "      <td>99895</td>\n",
       "      <td>2016-09-11</td>\n",
       "      <td>2016-09-13</td>\n",
       "      <td>98</td>\n",
       "      <td>l</td>\n",
       "      <td>green</td>\n",
       "      <td>28</td>\n",
       "      <td>49.90</td>\n",
       "      <td>48226</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1973-11-25</td>\n",
       "      <td>1003</td>\n",
       "      <td>2016-09-12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79940</th>\n",
       "      <td>99942</td>\n",
       "      <td>2016-09-11</td>\n",
       "      <td>2016-09-12</td>\n",
       "      <td>39</td>\n",
       "      <td>41</td>\n",
       "      <td>blue</td>\n",
       "      <td>26</td>\n",
       "      <td>89.90</td>\n",
       "      <td>48232</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1941-10-24</td>\n",
       "      <td>1007</td>\n",
       "      <td>2016-09-12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79941</th>\n",
       "      <td>99954</td>\n",
       "      <td>2016-09-11</td>\n",
       "      <td>NaT</td>\n",
       "      <td>1498</td>\n",
       "      <td>42</td>\n",
       "      <td>green</td>\n",
       "      <td>6</td>\n",
       "      <td>59.90</td>\n",
       "      <td>48234</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1962-10-02</td>\n",
       "      <td>1007</td>\n",
       "      <td>2016-09-12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>16688 rows × 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       order_item_id order_date delivery_date  item_id item_size item_color  \\\n",
       "0                  1 2016-06-22    2016-06-27      643        38       navy   \n",
       "10               111 2016-06-23    2016-06-27      166        38      white   \n",
       "21               235 2016-06-23    2016-06-27      262        40      black   \n",
       "32               307 2016-06-23           NaT       68         m     purple   \n",
       "45               429 2016-06-23    2016-06-27      405        41      green   \n",
       "...              ...        ...           ...      ...       ...        ...   \n",
       "79919          99640 2016-09-10    2016-09-13       71         7      black   \n",
       "79930          99814 2016-09-11    2016-09-13      166        38      ocher   \n",
       "79937          99895 2016-09-11    2016-09-13       98         l      green   \n",
       "79940          99942 2016-09-11    2016-09-12       39        41       blue   \n",
       "79941          99954 2016-09-11           NaT     1498        42      green   \n",
       "\n",
       "       brand_id  item_price  user_id user_title   user_dob  user_state  \\\n",
       "0            30       49.90    30822        Mrs 1969-04-17        1013   \n",
       "10            6       69.90    30837        Mrs 1963-02-28        1002   \n",
       "21           12       69.90    30856        Mrs 1968-06-30        1002   \n",
       "32            3       19.90    30870        Mrs 1958-11-20        1016   \n",
       "45           18       79.90    30892        Mrs 1966-05-10        1002   \n",
       "...         ...         ...      ...        ...        ...         ...   \n",
       "79919        21       49.95    48171        Mrs 1971-09-12        1002   \n",
       "79930         6       39.90    48212        Mrs        NaT        1002   \n",
       "79937        28       49.90    48226        Mrs 1973-11-25        1003   \n",
       "79940        26       89.90    48232        Mrs 1941-10-24        1007   \n",
       "79941         6       59.90    48234        Mrs 1962-10-02        1007   \n",
       "\n",
       "      user_reg_date  return  Invalid_User_Reg_Date_Flag  Invalid_Delivery_Date  \n",
       "0        2016-06-23       0                           1                      0  \n",
       "10       2016-06-24       1                           1                      0  \n",
       "21       2016-06-24       1                           1                      0  \n",
       "32       2016-06-24       0                           1                      0  \n",
       "45       2016-06-24       1                           1                      0  \n",
       "...             ...     ...                         ...                    ...  \n",
       "79919    2016-09-11       1                           1                      0  \n",
       "79930    2016-09-12       0                           1                      0  \n",
       "79937    2016-09-12       0                           1                      0  \n",
       "79940    2016-09-12       1                           1                      0  \n",
       "79941    2016-09-12       0                           1                      0  \n",
       "\n",
       "[16688 rows x 16 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Data with Flag for invalid user reg date\n",
    "data[(data['user_reg_date']>data['delivery_date']) | (data['user_reg_date']>data['order_date'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 592
    },
    "id": "BX0UMz4w2EeF",
    "outputId": "1270fc3c-5ac2-445b-cf90-ed7a270dfeed"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_item_id</th>\n",
       "      <th>order_date</th>\n",
       "      <th>delivery_date</th>\n",
       "      <th>item_id</th>\n",
       "      <th>item_size</th>\n",
       "      <th>item_color</th>\n",
       "      <th>brand_id</th>\n",
       "      <th>item_price</th>\n",
       "      <th>user_id</th>\n",
       "      <th>user_title</th>\n",
       "      <th>user_dob</th>\n",
       "      <th>user_state</th>\n",
       "      <th>user_reg_date</th>\n",
       "      <th>return</th>\n",
       "      <th>Invalid_User_Reg_Date_Flag</th>\n",
       "      <th>Invalid_Delivery_Date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>312</th>\n",
       "      <td>3141</td>\n",
       "      <td>2016-06-25</td>\n",
       "      <td>1994-12-31</td>\n",
       "      <td>32</td>\n",
       "      <td>l</td>\n",
       "      <td>red</td>\n",
       "      <td>3</td>\n",
       "      <td>21.90</td>\n",
       "      <td>598</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1970-05-08</td>\n",
       "      <td>1003</td>\n",
       "      <td>2015-02-17</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>431</th>\n",
       "      <td>4377</td>\n",
       "      <td>2016-06-26</td>\n",
       "      <td>1994-12-31</td>\n",
       "      <td>126</td>\n",
       "      <td>6+</td>\n",
       "      <td>red</td>\n",
       "      <td>21</td>\n",
       "      <td>39.95</td>\n",
       "      <td>31734</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1965-06-15</td>\n",
       "      <td>1008</td>\n",
       "      <td>2016-02-16</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>498</th>\n",
       "      <td>5244</td>\n",
       "      <td>2016-06-27</td>\n",
       "      <td>1994-12-31</td>\n",
       "      <td>27</td>\n",
       "      <td>5</td>\n",
       "      <td>brown</td>\n",
       "      <td>19</td>\n",
       "      <td>39.90</td>\n",
       "      <td>31858</td>\n",
       "      <td>Mr</td>\n",
       "      <td>NaT</td>\n",
       "      <td>1008</td>\n",
       "      <td>2016-06-28</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>609</th>\n",
       "      <td>6348</td>\n",
       "      <td>2016-06-27</td>\n",
       "      <td>1994-12-31</td>\n",
       "      <td>388</td>\n",
       "      <td>xxl</td>\n",
       "      <td>black</td>\n",
       "      <td>3</td>\n",
       "      <td>49.90</td>\n",
       "      <td>32010</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1973-06-11</td>\n",
       "      <td>1001</td>\n",
       "      <td>2015-02-17</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>610</th>\n",
       "      <td>6350</td>\n",
       "      <td>2016-06-27</td>\n",
       "      <td>1994-12-31</td>\n",
       "      <td>195</td>\n",
       "      <td>xxl</td>\n",
       "      <td>curry</td>\n",
       "      <td>46</td>\n",
       "      <td>9.90</td>\n",
       "      <td>32010</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1973-06-11</td>\n",
       "      <td>1001</td>\n",
       "      <td>2015-02-17</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79626</th>\n",
       "      <td>96777</td>\n",
       "      <td>2016-09-07</td>\n",
       "      <td>1994-12-31</td>\n",
       "      <td>1743</td>\n",
       "      <td>xl</td>\n",
       "      <td>black</td>\n",
       "      <td>20</td>\n",
       "      <td>79.90</td>\n",
       "      <td>47631</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1967-11-30</td>\n",
       "      <td>1008</td>\n",
       "      <td>2016-09-08</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79727</th>\n",
       "      <td>97731</td>\n",
       "      <td>2016-09-09</td>\n",
       "      <td>1994-12-31</td>\n",
       "      <td>2058</td>\n",
       "      <td>5+</td>\n",
       "      <td>grey</td>\n",
       "      <td>4</td>\n",
       "      <td>180.00</td>\n",
       "      <td>47791</td>\n",
       "      <td>Family</td>\n",
       "      <td>1988-01-08</td>\n",
       "      <td>1009</td>\n",
       "      <td>2016-09-10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79851</th>\n",
       "      <td>98939</td>\n",
       "      <td>2016-09-10</td>\n",
       "      <td>1994-12-31</td>\n",
       "      <td>475</td>\n",
       "      <td>45</td>\n",
       "      <td>grey</td>\n",
       "      <td>1</td>\n",
       "      <td>99.90</td>\n",
       "      <td>48031</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1982-11-08</td>\n",
       "      <td>1006</td>\n",
       "      <td>2016-09-11</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79863</th>\n",
       "      <td>99042</td>\n",
       "      <td>2016-09-10</td>\n",
       "      <td>1994-12-31</td>\n",
       "      <td>1670</td>\n",
       "      <td>39</td>\n",
       "      <td>grey</td>\n",
       "      <td>1</td>\n",
       "      <td>184.91</td>\n",
       "      <td>2649</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1979-02-07</td>\n",
       "      <td>1001</td>\n",
       "      <td>2015-06-14</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79887</th>\n",
       "      <td>99368</td>\n",
       "      <td>2016-09-10</td>\n",
       "      <td>1994-12-31</td>\n",
       "      <td>2154</td>\n",
       "      <td>42</td>\n",
       "      <td>grey</td>\n",
       "      <td>7</td>\n",
       "      <td>19.90</td>\n",
       "      <td>48120</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>1986-02-22</td>\n",
       "      <td>1008</td>\n",
       "      <td>2016-09-11</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>846 rows × 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       order_item_id order_date delivery_date  item_id item_size item_color  \\\n",
       "312             3141 2016-06-25    1994-12-31       32         l        red   \n",
       "431             4377 2016-06-26    1994-12-31      126        6+        red   \n",
       "498             5244 2016-06-27    1994-12-31       27         5      brown   \n",
       "609             6348 2016-06-27    1994-12-31      388       xxl      black   \n",
       "610             6350 2016-06-27    1994-12-31      195       xxl      curry   \n",
       "...              ...        ...           ...      ...       ...        ...   \n",
       "79626          96777 2016-09-07    1994-12-31     1743        xl      black   \n",
       "79727          97731 2016-09-09    1994-12-31     2058        5+       grey   \n",
       "79851          98939 2016-09-10    1994-12-31      475        45       grey   \n",
       "79863          99042 2016-09-10    1994-12-31     1670        39       grey   \n",
       "79887          99368 2016-09-10    1994-12-31     2154        42       grey   \n",
       "\n",
       "       brand_id  item_price  user_id user_title   user_dob  user_state  \\\n",
       "312           3       21.90      598        Mrs 1970-05-08        1003   \n",
       "431          21       39.95    31734        Mrs 1965-06-15        1008   \n",
       "498          19       39.90    31858         Mr        NaT        1008   \n",
       "609           3       49.90    32010        Mrs 1973-06-11        1001   \n",
       "610          46        9.90    32010        Mrs 1973-06-11        1001   \n",
       "...         ...         ...      ...        ...        ...         ...   \n",
       "79626        20       79.90    47631        Mrs 1967-11-30        1008   \n",
       "79727         4      180.00    47791     Family 1988-01-08        1009   \n",
       "79851         1       99.90    48031        Mrs 1982-11-08        1006   \n",
       "79863         1      184.91     2649        Mrs 1979-02-07        1001   \n",
       "79887         7       19.90    48120        Mrs 1986-02-22        1008   \n",
       "\n",
       "      user_reg_date  return  Invalid_User_Reg_Date_Flag  Invalid_Delivery_Date  \n",
       "312      2015-02-17       1                           1                      1  \n",
       "431      2016-02-16       1                           1                      1  \n",
       "498      2016-06-28       1                           1                      1  \n",
       "609      2015-02-17       1                           1                      1  \n",
       "610      2015-02-17       1                           1                      1  \n",
       "...             ...     ...                         ...                    ...  \n",
       "79626    2016-09-08       0                           1                      1  \n",
       "79727    2016-09-10       0                           1                      1  \n",
       "79851    2016-09-11       0                           1                      1  \n",
       "79863    2015-06-14       1                           1                      1  \n",
       "79887    2016-09-11       0                           1                      1  \n",
       "\n",
       "[846 rows x 16 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Data with flag for invalid delivery date\n",
    "data[data['delivery_date']<data['order_date']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "id": "KGN0IYh92EeG"
   },
   "outputs": [],
   "source": [
    "#Creating Flags for missing values of dates i.e for missing delivery date & user bob date\n",
    "data['Missing_Delivery_Date']=data['delivery_date'].apply(lambda x: 1 if pd.isnull(x) else 0)\n",
    "data['User_Dob_Missing_Flag']=data['user_dob'].apply(lambda x: 1 if pd.isnull(x) else 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "id": "W3j_Xyvb2EeG"
   },
   "outputs": [],
   "source": [
    "#Creating Derived Variables\n",
    "#Days for delivery is a variable which tells days taken to deliver the order after order is placed\n",
    "#Age Customer is a variable which tells the age of the customer when he/she is placing the order\n",
    "#Day_Delivery is the day at which order is delivered\n",
    "#Month_Delivery is the month in which order is delivered\n",
    "#Year_Delivery is the year in which order is delivered\n",
    "data['Days_For_Delivery']=np.nan\n",
    "data['Age_Customer']=np.nan\n",
    "data['Tenure_Customer_days']=np.nan\n",
    "data['Day_Delivery']=np.nan\n",
    "data['Month_Delivery']=np.nan\n",
    "data['Year_Delivery']=np.nan\n",
    "\n",
    "for i in range(0,len(data)):\n",
    "    if ((data.at[i,'Invalid_Delivery_Date']==0) and (data.at[i,'Missing_Delivery_Date']==0)):\n",
    "        data.at[i,'Days_For_Delivery']=(data.at[i,'delivery_date']-data.at[i,'order_date']).days\n",
    "        data.at[i,'Day_Delivery']=data.at[i,'delivery_date'].day\n",
    "        data.at[i,'Month_Delivery']=data.at[i,'delivery_date'].month\n",
    "        data.at[i,'Year_Delivery']=data.at[i,'delivery_date'].year\n",
    "    if ((data.at[i,'Invalid_User_Reg_Date_Flag']==0) and (data.at[i,'User_Dob_Missing_Flag']==0)):\n",
    "        data.at[i,'Age_Customer']=data.at[i,'order_date'].year-data.at[i,'user_dob'].year\n",
    "    if data.at[i,'Invalid_User_Reg_Date_Flag']==0:\n",
    "        data.at[i,'Tenure_Customer_days']=(data.at[i,'order_date']-data.at[i,'user_reg_date']).days "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "id": "kZXkz86F2EeH"
   },
   "outputs": [],
   "source": [
    "#Missing Value Imputation for Derived Variables\n",
    "data['Days_For_Delivery'].fillna(data['Days_For_Delivery'].median(),inplace=True)\n",
    "data['Age_Customer'].fillna(data['Age_Customer'].mode()[0],inplace=True)\n",
    "data['Tenure_Customer_days'].fillna(data['Tenure_Customer_days'].median(),inplace=True)\n",
    "data['Day_Delivery'].fillna(data['Day_Delivery'].mode()[0],inplace=True)\n",
    "data['Month_Delivery'].fillna(data['Month_Delivery'].mode()[0],inplace=True)\n",
    "data['Year_Delivery'].fillna(data['Year_Delivery'].mode()[0],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "id": "acCLH2Tn2EeH"
   },
   "outputs": [],
   "source": [
    "#Dummy Variables for Top 10 most occuring item id's i.e items which are ordered most \n",
    "top_10_item_id=list(data['item_id'].value_counts().to_frame().nlargest(10,'item_id').index)\n",
    "data['item_id_new']=data['item_id'].apply(lambda x: x if x in top_10_item_id else 'other')\n",
    "data=pd.get_dummies(data,columns=['item_id_new'],prefix='item_id').drop(['item_id_other'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "id": "vRF7rHSJ2EeH"
   },
   "outputs": [],
   "source": [
    "#Label encoding of Top 10 item sizes which had most returns\n",
    "top10_item_size=list(data[data['return']==1]['item_size'].value_counts().to_frame().nlargest(10,'item_size').index)\n",
    "top10_item_size_rank=data[data['return']==1]['item_size'].value_counts().to_frame().nlargest(10,'item_size').rank()\n",
    "data['item_size_new']=data['item_size'].apply(lambda x: x if x in top10_item_size else 'other')\n",
    "top10_item_size_rank=pd.concat([top10_item_size_rank,pd.DataFrame({'item_size':0},index=['other'])])\n",
    "data['item_size_new']=data['item_size_new'].apply(lambda x:top10_item_size_rank.at[x,'item_size'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "id": "Ap0wncvp2EeI"
   },
   "outputs": [],
   "source": [
    "#Label Encoding of Top 10 items colors which had most returns\n",
    "top10_item_color=list(data[data['return']==1]['item_color'].value_counts().to_frame().nlargest(10,'item_color').index)\n",
    "top10_item_color_rank=data[data['return']==1]['item_color'].value_counts().to_frame().nlargest(10,'item_color').rank()\n",
    "data['item_color_new']=data['item_color'].apply(lambda x: x if x in top10_item_color else 'other')\n",
    "top10_item_color_rank=pd.concat([top10_item_color_rank,pd.DataFrame({'item_color':0},index=['other'])])\n",
    "data['item_color_new']=data['item_color_new'].apply(lambda x:top10_item_color_rank.at[x,'item_color'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "id": "dhOCuj1S2EeJ"
   },
   "outputs": [],
   "source": [
    "#Label Encoding of Top 10 brands which had most returns\n",
    "top10_brand_id=list(data[data['return']==1]['brand_id'].value_counts().to_frame().nlargest(10,'brand_id').index)\n",
    "top10_brand_id_rank=data[data['return']==1]['brand_id'].value_counts().to_frame().nlargest(10,'brand_id').rank()\n",
    "data['brand_id_new']=data['brand_id'].apply(lambda x: x if x in top10_brand_id else 'other')\n",
    "top10_brand_id_rank=pd.concat([top10_brand_id_rank,pd.DataFrame({'brand_id':0},index=['other'])])\n",
    "data['brand_id_new']=data['brand_id_new'].apply(lambda x:top10_brand_id_rank.at[x,'brand_id'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "id": "NRqQQAq82EeJ"
   },
   "outputs": [],
   "source": [
    "#Ranking Users on basis of % of returns they have made with higher rank to higher percentages\n",
    "df_user=data['user_id'].value_counts().to_frame().rename({'user_id':'No of Orders'},axis=1).join(data[data['return']==1]['user_id'].value_counts().to_frame().rename({'user_id':'no_of_returns'},axis=1),how='left')\n",
    "df_user['no_of_returns'].fillna(0.0001,inplace=True)\n",
    "df_user['%of returns']=(df_user['no_of_returns']/df_user['No of Orders'])*100\n",
    "df_user=df_user['%of returns'].rank(method='dense').to_frame()\n",
    "df_user=df_user.reset_index()\n",
    "data=pd.merge(left=data,right=df_user,how='left',left_on='user_id',right_on='index').rename({'%of returns':'user_id_new'},axis=1)\n",
    "data.drop(['index'],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "j4yy5IV-lLqr"
   },
   "outputs": [],
   "source": [
    "#Saving User Ranking to use in scoring code\n",
    "df_user.rename({'index':'user_id','%of returns':'user_id_new'},axis=1).to_csv(path+'Output_Scoring/user_id_ranking.csv',index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "id": "ky_Y2yvB2EeK"
   },
   "outputs": [],
   "source": [
    "#Creating Dummy Variables for user title\n",
    "data=pd.get_dummies(data,prefix='user_title',columns=['user_title'],drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "id": "ZsYcDJWI2EeK"
   },
   "outputs": [],
   "source": [
    "#Creating Dummy Variables for user state\n",
    "data=pd.get_dummies(data,prefix='user_state',columns=['user_state'],drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 309
    },
    "id": "Ix-zDe6z2EeK",
    "outputId": "dacada10-b26b-4c87-9972-cd35e12b56bd"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_item_id</th>\n",
       "      <th>order_date</th>\n",
       "      <th>delivery_date</th>\n",
       "      <th>item_id</th>\n",
       "      <th>item_size</th>\n",
       "      <th>item_color</th>\n",
       "      <th>brand_id</th>\n",
       "      <th>item_price</th>\n",
       "      <th>user_id</th>\n",
       "      <th>user_dob</th>\n",
       "      <th>user_reg_date</th>\n",
       "      <th>return</th>\n",
       "      <th>Invalid_User_Reg_Date_Flag</th>\n",
       "      <th>Invalid_Delivery_Date</th>\n",
       "      <th>Missing_Delivery_Date</th>\n",
       "      <th>User_Dob_Missing_Flag</th>\n",
       "      <th>Days_For_Delivery</th>\n",
       "      <th>Age_Customer</th>\n",
       "      <th>Tenure_Customer_days</th>\n",
       "      <th>Day_Delivery</th>\n",
       "      <th>Month_Delivery</th>\n",
       "      <th>Year_Delivery</th>\n",
       "      <th>item_id_22</th>\n",
       "      <th>item_id_32</th>\n",
       "      <th>item_id_100</th>\n",
       "      <th>item_id_1401</th>\n",
       "      <th>item_id_1415</th>\n",
       "      <th>item_id_1445</th>\n",
       "      <th>item_id_1470</th>\n",
       "      <th>item_id_1532</th>\n",
       "      <th>item_id_1546</th>\n",
       "      <th>item_id_1607</th>\n",
       "      <th>item_size_new</th>\n",
       "      <th>item_color_new</th>\n",
       "      <th>brand_id_new</th>\n",
       "      <th>user_id_new</th>\n",
       "      <th>user_title_Family</th>\n",
       "      <th>user_title_Mr</th>\n",
       "      <th>user_title_Mrs</th>\n",
       "      <th>user_title_not reported</th>\n",
       "      <th>user_state_1002</th>\n",
       "      <th>user_state_1003</th>\n",
       "      <th>user_state_1004</th>\n",
       "      <th>user_state_1005</th>\n",
       "      <th>user_state_1006</th>\n",
       "      <th>user_state_1007</th>\n",
       "      <th>user_state_1008</th>\n",
       "      <th>user_state_1009</th>\n",
       "      <th>user_state_1010</th>\n",
       "      <th>user_state_1011</th>\n",
       "      <th>user_state_1012</th>\n",
       "      <th>user_state_1013</th>\n",
       "      <th>user_state_1014</th>\n",
       "      <th>user_state_1015</th>\n",
       "      <th>user_state_1016</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2016-06-22</td>\n",
       "      <td>2016-06-27</td>\n",
       "      <td>643</td>\n",
       "      <td>38</td>\n",
       "      <td>navy</td>\n",
       "      <td>30</td>\n",
       "      <td>49.9</td>\n",
       "      <td>30822</td>\n",
       "      <td>1969-04-17</td>\n",
       "      <td>2016-06-23</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>420.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10</td>\n",
       "      <td>2016-06-22</td>\n",
       "      <td>2016-06-27</td>\n",
       "      <td>195</td>\n",
       "      <td>xxl</td>\n",
       "      <td>grey</td>\n",
       "      <td>46</td>\n",
       "      <td>19.9</td>\n",
       "      <td>30823</td>\n",
       "      <td>1970-04-22</td>\n",
       "      <td>2015-03-15</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>465.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>175.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11</td>\n",
       "      <td>2016-06-22</td>\n",
       "      <td>2016-07-05</td>\n",
       "      <td>25</td>\n",
       "      <td>xxl</td>\n",
       "      <td>grey</td>\n",
       "      <td>5</td>\n",
       "      <td>79.9</td>\n",
       "      <td>30823</td>\n",
       "      <td>1970-04-22</td>\n",
       "      <td>2015-03-15</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>465.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>175.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>32</td>\n",
       "      <td>2016-06-23</td>\n",
       "      <td>2016-06-26</td>\n",
       "      <td>173</td>\n",
       "      <td>m</td>\n",
       "      <td>brown</td>\n",
       "      <td>20</td>\n",
       "      <td>19.9</td>\n",
       "      <td>17234</td>\n",
       "      <td>1960-01-09</td>\n",
       "      <td>2015-02-17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>492.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>128.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>43</td>\n",
       "      <td>2016-06-23</td>\n",
       "      <td>2016-06-26</td>\n",
       "      <td>394</td>\n",
       "      <td>40</td>\n",
       "      <td>black</td>\n",
       "      <td>44</td>\n",
       "      <td>90.0</td>\n",
       "      <td>30827</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2016-02-09</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>135.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>263.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   order_item_id order_date delivery_date  item_id item_size item_color  \\\n",
       "0              1 2016-06-22    2016-06-27      643        38       navy   \n",
       "1             10 2016-06-22    2016-06-27      195       xxl       grey   \n",
       "2             11 2016-06-22    2016-07-05       25       xxl       grey   \n",
       "3             32 2016-06-23    2016-06-26      173         m      brown   \n",
       "4             43 2016-06-23    2016-06-26      394        40      black   \n",
       "\n",
       "   brand_id  item_price  user_id   user_dob user_reg_date  return  \\\n",
       "0        30        49.9    30822 1969-04-17    2016-06-23       0   \n",
       "1        46        19.9    30823 1970-04-22    2015-03-15       1   \n",
       "2         5        79.9    30823 1970-04-22    2015-03-15       0   \n",
       "3        20        19.9    17234 1960-01-09    2015-02-17       0   \n",
       "4        44        90.0    30827        NaT    2016-02-09       1   \n",
       "\n",
       "   Invalid_User_Reg_Date_Flag  Invalid_Delivery_Date  Missing_Delivery_Date  \\\n",
       "0                           1                      0                      0   \n",
       "1                           0                      0                      0   \n",
       "2                           0                      0                      0   \n",
       "3                           0                      0                      0   \n",
       "4                           0                      0                      0   \n",
       "\n",
       "   User_Dob_Missing_Flag  Days_For_Delivery  Age_Customer  \\\n",
       "0                      0                5.0          50.0   \n",
       "1                      0                5.0          46.0   \n",
       "2                      0               13.0          46.0   \n",
       "3                      0                3.0          56.0   \n",
       "4                      1                3.0          50.0   \n",
       "\n",
       "   Tenure_Customer_days  Day_Delivery  Month_Delivery  Year_Delivery  \\\n",
       "0                 420.0          27.0             6.0         2016.0   \n",
       "1                 465.0          27.0             6.0         2016.0   \n",
       "2                 465.0           5.0             7.0         2016.0   \n",
       "3                 492.0          26.0             6.0         2016.0   \n",
       "4                 135.0          26.0             6.0         2016.0   \n",
       "\n",
       "   item_id_22  item_id_32  item_id_100  item_id_1401  item_id_1415  \\\n",
       "0           0           0            0             0             0   \n",
       "1           0           0            0             0             0   \n",
       "2           0           0            0             0             0   \n",
       "3           0           0            0             0             0   \n",
       "4           0           0            0             0             0   \n",
       "\n",
       "   item_id_1445  item_id_1470  item_id_1532  item_id_1546  item_id_1607  \\\n",
       "0             0             0             0             0             0   \n",
       "1             0             0             0             0             0   \n",
       "2             0             0             0             0             0   \n",
       "3             0             0             0             0             0   \n",
       "4             0             0             0             0             0   \n",
       "\n",
       "   item_size_new  item_color_new  brand_id_new  user_id_new  \\\n",
       "0            4.0             0.0           0.0         19.0   \n",
       "1            7.0             7.0           0.0        175.0   \n",
       "2            7.0             7.0           6.0        175.0   \n",
       "3            8.0             8.0           5.0        128.0   \n",
       "4            6.0            10.0           0.0        263.0   \n",
       "\n",
       "   user_title_Family  user_title_Mr  user_title_Mrs  user_title_not reported  \\\n",
       "0                  0              0               1                        0   \n",
       "1                  0              0               1                        0   \n",
       "2                  0              0               1                        0   \n",
       "3                  0              0               1                        0   \n",
       "4                  0              0               1                        0   \n",
       "\n",
       "   user_state_1002  user_state_1003  user_state_1004  user_state_1005  \\\n",
       "0                0                0                0                0   \n",
       "1                0                0                0                0   \n",
       "2                0                0                0                0   \n",
       "3                0                0                0                0   \n",
       "4                0                0                0                0   \n",
       "\n",
       "   user_state_1006  user_state_1007  user_state_1008  user_state_1009  \\\n",
       "0                0                0                0                0   \n",
       "1                0                0                0                0   \n",
       "2                0                0                0                0   \n",
       "3                0                0                0                0   \n",
       "4                1                0                0                0   \n",
       "\n",
       "   user_state_1010  user_state_1011  user_state_1012  user_state_1013  \\\n",
       "0                0                0                0                1   \n",
       "1                0                0                0                0   \n",
       "2                0                0                0                0   \n",
       "3                0                0                0                1   \n",
       "4                0                0                0                0   \n",
       "\n",
       "   user_state_1014  user_state_1015  user_state_1016  \n",
       "0                0                0                0  \n",
       "1                0                0                0  \n",
       "2                0                0                0  \n",
       "3                0                0                0  \n",
       "4                0                0                0  "
      ]
     },
     "execution_count": 31,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "id": "EzkxvwVB2EeK"
   },
   "outputs": [],
   "source": [
    "#Dropping Extra Features which are not required\n",
    "data_features=data.copy()\n",
    "data_features.drop(['order_item_id','order_date','delivery_date','item_id','item_size','item_color','brand_id','user_id','user_dob','user_reg_date'],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "id": "mExH6dht2EeL"
   },
   "outputs": [],
   "source": [
    "#Changing Data Types\n",
    "data_features['Days_For_Delivery']=data_features['Days_For_Delivery'].astype(int)\n",
    "data_features['Age_Customer']=data_features['Age_Customer'].astype(int)\n",
    "data_features['Tenure_Customer_days']=data_features['Tenure_Customer_days'].astype(int)\n",
    "data_features['Day_Delivery']=data_features['Day_Delivery'].astype(int)\n",
    "data_features['Month_Delivery']=data_features['Month_Delivery'].astype(int)\n",
    "data_features['Year_Delivery']=data_features['Year_Delivery'].astype(int)\n",
    "data_features['item_size_new']=data_features['item_size_new'].astype(int)\n",
    "data_features['item_color_new']=data_features['item_color_new'].astype(int)\n",
    "data_features['brand_id_new']=data_features['brand_id_new'].astype(int)\n",
    "data_features['user_id_new']=data_features['user_id_new'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "id": "zp8paZxC2EeL"
   },
   "outputs": [],
   "source": [
    "#Renaming Columns\n",
    "data_features.rename({'item_size_new':'top_item_size_label','item_color_new':'top_item_color_label','brand_id_new':'top_brand_id_label','user_id_new':'user_id_label'},axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 241
    },
    "id": "S9Jhg02n2EeL",
    "outputId": "4b9f95cc-00d2-43fc-b53d-a6416c423ed3"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item_price</th>\n",
       "      <th>return</th>\n",
       "      <th>Invalid_User_Reg_Date_Flag</th>\n",
       "      <th>Invalid_Delivery_Date</th>\n",
       "      <th>Missing_Delivery_Date</th>\n",
       "      <th>User_Dob_Missing_Flag</th>\n",
       "      <th>Days_For_Delivery</th>\n",
       "      <th>Age_Customer</th>\n",
       "      <th>Tenure_Customer_days</th>\n",
       "      <th>Day_Delivery</th>\n",
       "      <th>Month_Delivery</th>\n",
       "      <th>Year_Delivery</th>\n",
       "      <th>item_id_22</th>\n",
       "      <th>item_id_32</th>\n",
       "      <th>item_id_100</th>\n",
       "      <th>item_id_1401</th>\n",
       "      <th>item_id_1415</th>\n",
       "      <th>item_id_1445</th>\n",
       "      <th>item_id_1470</th>\n",
       "      <th>item_id_1532</th>\n",
       "      <th>item_id_1546</th>\n",
       "      <th>item_id_1607</th>\n",
       "      <th>top_item_size_label</th>\n",
       "      <th>top_item_color_label</th>\n",
       "      <th>top_brand_id_label</th>\n",
       "      <th>user_id_label</th>\n",
       "      <th>user_title_Family</th>\n",
       "      <th>user_title_Mr</th>\n",
       "      <th>user_title_Mrs</th>\n",
       "      <th>user_title_not reported</th>\n",
       "      <th>user_state_1002</th>\n",
       "      <th>user_state_1003</th>\n",
       "      <th>user_state_1004</th>\n",
       "      <th>user_state_1005</th>\n",
       "      <th>user_state_1006</th>\n",
       "      <th>user_state_1007</th>\n",
       "      <th>user_state_1008</th>\n",
       "      <th>user_state_1009</th>\n",
       "      <th>user_state_1010</th>\n",
       "      <th>user_state_1011</th>\n",
       "      <th>user_state_1012</th>\n",
       "      <th>user_state_1013</th>\n",
       "      <th>user_state_1014</th>\n",
       "      <th>user_state_1015</th>\n",
       "      <th>user_state_1016</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>49.9</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>420</td>\n",
       "      <td>27</td>\n",
       "      <td>6</td>\n",
       "      <td>2016</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19.9</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>46</td>\n",
       "      <td>465</td>\n",
       "      <td>27</td>\n",
       "      <td>6</td>\n",
       "      <td>2016</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>175</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>79.9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>46</td>\n",
       "      <td>465</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>2016</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>175</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>19.9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>56</td>\n",
       "      <td>492</td>\n",
       "      <td>26</td>\n",
       "      <td>6</td>\n",
       "      <td>2016</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>128</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>90.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>50</td>\n",
       "      <td>135</td>\n",
       "      <td>26</td>\n",
       "      <td>6</td>\n",
       "      <td>2016</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>263</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   item_price  return  Invalid_User_Reg_Date_Flag  Invalid_Delivery_Date  \\\n",
       "0        49.9       0                           1                      0   \n",
       "1        19.9       1                           0                      0   \n",
       "2        79.9       0                           0                      0   \n",
       "3        19.9       0                           0                      0   \n",
       "4        90.0       1                           0                      0   \n",
       "\n",
       "   Missing_Delivery_Date  User_Dob_Missing_Flag  Days_For_Delivery  \\\n",
       "0                      0                      0                  5   \n",
       "1                      0                      0                  5   \n",
       "2                      0                      0                 13   \n",
       "3                      0                      0                  3   \n",
       "4                      0                      1                  3   \n",
       "\n",
       "   Age_Customer  Tenure_Customer_days  Day_Delivery  Month_Delivery  \\\n",
       "0            50                   420            27               6   \n",
       "1            46                   465            27               6   \n",
       "2            46                   465             5               7   \n",
       "3            56                   492            26               6   \n",
       "4            50                   135            26               6   \n",
       "\n",
       "   Year_Delivery  item_id_22  item_id_32  item_id_100  item_id_1401  \\\n",
       "0           2016           0           0            0             0   \n",
       "1           2016           0           0            0             0   \n",
       "2           2016           0           0            0             0   \n",
       "3           2016           0           0            0             0   \n",
       "4           2016           0           0            0             0   \n",
       "\n",
       "   item_id_1415  item_id_1445  item_id_1470  item_id_1532  item_id_1546  \\\n",
       "0             0             0             0             0             0   \n",
       "1             0             0             0             0             0   \n",
       "2             0             0             0             0             0   \n",
       "3             0             0             0             0             0   \n",
       "4             0             0             0             0             0   \n",
       "\n",
       "   item_id_1607  top_item_size_label  top_item_color_label  \\\n",
       "0             0                    4                     0   \n",
       "1             0                    7                     7   \n",
       "2             0                    7                     7   \n",
       "3             0                    8                     8   \n",
       "4             0                    6                    10   \n",
       "\n",
       "   top_brand_id_label  user_id_label  user_title_Family  user_title_Mr  \\\n",
       "0                   0             19                  0              0   \n",
       "1                   0            175                  0              0   \n",
       "2                   6            175                  0              0   \n",
       "3                   5            128                  0              0   \n",
       "4                   0            263                  0              0   \n",
       "\n",
       "   user_title_Mrs  user_title_not reported  user_state_1002  user_state_1003  \\\n",
       "0               1                        0                0                0   \n",
       "1               1                        0                0                0   \n",
       "2               1                        0                0                0   \n",
       "3               1                        0                0                0   \n",
       "4               1                        0                0                0   \n",
       "\n",
       "   user_state_1004  user_state_1005  user_state_1006  user_state_1007  \\\n",
       "0                0                0                0                0   \n",
       "1                0                0                0                0   \n",
       "2                0                0                0                0   \n",
       "3                0                0                0                0   \n",
       "4                0                0                1                0   \n",
       "\n",
       "   user_state_1008  user_state_1009  user_state_1010  user_state_1011  \\\n",
       "0                0                0                0                0   \n",
       "1                0                0                0                0   \n",
       "2                0                0                0                0   \n",
       "3                0                0                0                0   \n",
       "4                0                0                0                0   \n",
       "\n",
       "   user_state_1012  user_state_1013  user_state_1014  user_state_1015  \\\n",
       "0                0                1                0                0   \n",
       "1                0                0                0                0   \n",
       "2                0                0                0                0   \n",
       "3                0                1                0                0   \n",
       "4                0                0                0                0   \n",
       "\n",
       "   user_state_1016  \n",
       "0                0  \n",
       "1                0  \n",
       "2                0  \n",
       "3                0  \n",
       "4                0  "
      ]
     },
     "execution_count": 35,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_features.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "BG2Hrv8j2EeM"
   },
   "source": [
    "# Box Plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1000
    },
    "id": "SxyH3drT2EeM",
    "outputId": "093e58cb-916a-42b5-9dfd-578721e035b2"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Just plotting box plots to check distribution of numeric variables wont do outlier treatment since we will be using Random Forest Algorithm which is not sensitive to outliers\n",
    "for col in ['item_price','Days_For_Delivery','Age_Customer','Month_Delivery']:\n",
    "    sns.boxplot(y=data_features[col],x=data_features['return'])\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "v1hj-T0KvB7I"
   },
   "source": [
    "# Feature Selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "oHBTYL2b2EeN",
    "outputId": "84efb0d6-9749-4d8b-df80-64e3f74d1431"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "45.859028081806244"
      ]
     },
     "execution_count": 37,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking For Imbalanced Classes , since return order are 46% of total order hence its not the case of imbalanced data.\n",
    "(data_features['return'].value_counts()[1]/data_features.shape[0])*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 391
    },
    "id": "UJYUsUKS2EeN",
    "outputId": "fc798971-47f1-4b46-c053-b987721ff997"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f0b6ffdfdd0>"
      ]
     },
     "execution_count": 38,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAc8AAAFlCAYAAACN/2OjAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdd7xcVbn/8c83BQIkdFCkBRCkGUpipGqUcrEiEkCKCHhFFEFFUK6oFH9e8SIqVUSEiLRINQrSCWCkJCQhBQglBEE60kJNcr6/P9Y6ZOfklJkzs+fMOXnevPYrM7s8e+1JmDVr7bXXI9uEEEIIoXL9eroAIYQQQm8TlWcIIYRQpag8QwghhCpF5RlCCCFUKSrPEEIIoUpReYYQQghVisozhBBCryXpfEnPS5rRwXZJOl3So5KmSdq6HueNyjOEEEJvNgbYrZPtnwI2zMuhwG/rcdKoPEMIIfRatu8A/tPJLrsDFzq5G1hR0hq1nndArQFC7zfvxdmlTDN16vCflBGWB/VWKXEBXmt5t5S4K/VbupS4a1FOXIAH/HopcZeifylxy7S0ymlnvOp5pcS9cM9SwgIw+FfjVGuMar5zllptg6+TWoytzrV9bhWnWxN4svD+qbzumSpiLCYqzxBCCE0rV5TVVJYNEZVnCCGExmpZ0Miz/RtYu/B+rbyuJnHPM4QQQmMtmF/5UrtxwIF51O02wKu2a+qyhWh5hhBCaDC7pW6xJF0KjAJWlfQUcDwwMJ3H5wDXAZ8GHgXeBA6ux3mj8gwhhNBYLfWrPG3v28V2A4fX7YRZdNs2IUkrSvpmT5cjhBBK4ZbKlyYVlWcPyn3w7f0drAhUXXlK6n3PAIQQljwtCypfmlRUng0maaikWZIuBGYAP5Y0MU8bdWLe7WRgA0lTJZ0iaZSkvxVinCnpoPx6jqRfSJoM7JXfnyhpsqTpkjZu9DWGEEKnouUZumlD4Gzgu6SHdUcCWwLDJX0MOBZ4zPaWto+pIN5Ltre2fVl+/6LtrUnTUB3d3gGSDpU0SdKk8y68tNbrCSGEinnB/IqXZhUDhnrGE7bvlvRLYFdgSl4/mFSx/qvKeGPbvL8q/3kf8MX2Dig+eFzWDEMhhNCuOg4Y6ilRefaMN/KfAn5u+3fFjZKGttl/Pov2EgzqIF6rd/KfC4i/4xBCs2ni7thKRbdtz7oBOETSYABJa0paHXgdGFLY7wlgU0lLS1oR2KnxRQ0hhDrpAwOGolXSg2zfKGkT4C5JAHOBA2w/JmlCzk/3d9vHSPozaYDR4yzs5g0hhN6nD7Q8o/JsMNtzgM0L708DTmtnv/3avP8+8P129hva0Xvbk0gzb4QQQvNo4oFAlYrKM4QQQmPFgKEQQgihOnbz3susVFSeIYQQGivueYa+4NThPykl7vfuO6mUuCcP/3EpcQGmqZx7MQNRKXGffu+ppPrb753BpcS9fOk3S4k7690XS4kLsN/AoaXEHTv/hVLinnbl2l3v1E3H/aoOQaLbNoQQQqhStDxDCCGEKi2Y19MlqFlUniGEEBorum1DCCGEKkW3bQghhFClaHmGEEIIVeoDlWdMDN8JSf/Mfw6VtF9X+zeCpA9IuqKnyxFCCN3lBfMqXppVVJ6dsL1dfjkU6PHKU9IA20/bHt3TZQkhhG5zS+VLk4rKsxOS5uaXJwM7Spoq6buS+ks6RdJESdMkfT3vP0rS7ZL+Imm2pJMl7S/pXknTJW3QybnGSDpH0iRJD0v6bF5/kKRxkm4Fbsmt4Bl5W39Jv5Q0I5fjiLx+eC7HfZJukLRGqR9UCCFUo6Wl8qVJxT3PyhwLHG27tUI7FHjV9kckLQ1MkHRj3ncLYBPgP8Bs4DzbIyV9GzgC+E4n5xkKjAQ2AG6T9MG8fmtgmO3/tEmUfWg+Zkvb8yWtLGkgcAawu+0XJO0D/Aw4pHiifA2HAuyx8khGDt6w2s8khBC6p4lblJWKyrN7dgWGSWrtPl0B2BB4F5ho+xkASY8BrZXqdOATXcT9s+0W4BFJs4GN8/qbbP+nnf13Bs6xPR8gV66bk1Ke3ZRzhPYHnml7oO1zgXMBTl73AHd9ySGEUCdN3KKsVFSe3SPgCNs3LLJSGgWLTDbaUnjfQtefd9tKrPX9G1WWbabtbas4JoQQGqcPtDzjnmdlXgeGFN7fAHwjd5EiaSNJy9XhPHtJ6pfvja4PzOpi/5uAr0sakMuxcj5mNUnb5nUDJW1Wh7KFEEJ9zJ9f+dIFSbtJmiXpUUnHtrN9HUm3SZqSx4Z8uh6XEC3PykwDFki6HxgDnEa61zhZqW/0BeALdTjPv4B7geWBw2y/nbteO3IesBEwTdI84Pe2z8zdyadLWoH0d/wbYGYdyhdCCLWrU8tTUn/gLGAX4ClgoqRxth8o7PYj0i2x30raFLiO9P1dk6g8O2F7cP5zHvDJNpt/mJei8XlpPX5U4fUi2zpws+3D2pRhDKnCbn0/h3RPk3yv86i8FI+ZCnysi3OFEELPqN89z5HAo7ZnA0i6DNgdKFaeJjVIII1PeboeJ47KM4QQQmNV0fIsPhmQnZsHPAKsCTxZ2PYU8NE2IU4AbsyP8i1HGmhZs6g8G0zSccBebVZfbvugHihOCCE0XhUtz+KTAd20LzDG9ql5LMifJG2en2zotqg8G8z2z0jPXTaNB/VWKXFPHv7jUuIee99PS4kLcODwo7reqRve8IJS4q6mpUqJC7DdRnXp3VrM7f96fylx3x64UilxAe7R66XEXW3A4FLiPqy3S4lbN/UbbftvYO3C+7XyuqKvArsB2L5L0iBgVeD5Wk4co21DCCE0Vv1G204ENpS0nqSlgC8B49rs8y9gJwBJmwCDSIM8axItzxBCCI3l+szLkmdW+xbp8cH+wPm2Z0o6CZhkexzwPeD3kr5LGjx0kF17AaLyDCGE0Fh1nGHI9nWkx0+K635SeP0AsH3dTphF5RlCCKGxYnq+EEIIoUp9YHq+qDxDCCE01oJyRp83Uo+OtpW0IOfInCnpfknfk1R6mQrnbV2G1hjvBEn/zrEekXRVngaqq+PGtGZmkXReJceEEEKvF/k8a/aW7S0BJK0OXEKaRun4Rp23GpIGtKb/asevbf8y77cPcKukD9uuaEi07f+utjwdlLG/XdJDhSGEUA9NXClWqmme87T9PGkKpm8pGSrpTkmT87IdgKQLJb03CbukiyXtLmkzSffm1t80SVVld5a0paS787FXS1oprx8v6TeSJgHfrvBaxpLyeO6XYwyXdLuk+yTdIGmNds4/XtIISYdJOqWw/iBJZ+bXBxSu8Xd5UmQkzZV0ap64/jhJ1xSO30XS1dV8FiGEUCq3VL40qaapPAHy5L79gdVJsz/sYntrYB/g9LzbH4CDAHLWkO2Aa4HDgNNyi3IEaY7DjixT6LJtrVguBH5gexgpcXWx9buU7RG2T63iciYDG+e0ZWcAo20PB86n8xmGrgT2KLzfB7gsP9y7D7B9vsYFwP55n+WAe2xvAfw0n3e1vO3gfM5FSDpU0iRJkx5+/fEqLiuEEGrjFle8NKue7rbtzEDgTEmtFcVGALZvl3R2rhz2BK7MD8reRWp1rQVcZfuRTmIv0m2bK+EVbd+eV/0RuLyw/9hulL81l9iHSFlQbsrpxfoDz3R0kO0XJM2WtA3wCLAxMAE4HBhOSrkDsAwLp5daQKp0sW1JfwIOkHQBsC1wYDvneW++yK8M3bN5/4WGEPqePtBt21SVp6T1SRXB86SW33PAFqQWcnGyxguBA0hTMR0MYPsSSfcAnwGuk/R127fWqWhvdOOYrYBJpEp0pu1tqzj2MmBv4CHg6lwhCvij7f9pZ/+329znvAD4K+kzu7yT+7QhhNB4Mdq2fnJL8hzgzDx10grAM3nm+y+TWmytxgDfgfdmj2iteGfbPh34CzCs0nPbfhV4WdKOedWXgds7OaSra9kT2BW4FJgFrJZn80fSQEmbdRHialJOun1JFSnALcDoPLAKSStLWreD63malLPuR6SKNIQQmkeMtq3ZMpKmkrpo5wN/An6Vt50NXCnpQOB6Cq0/289JehC4phBrb+DLkuYBzwL/W2VZvgKcI2lZYDa5RVuF70o6gHT/cQbwydaRtvlxlNNz9/AA4DfAzI4C2X45X9+mtu/N6x6Q9CNSXrp+wDxSV+4THYS5GFjN9oNVXkcIIZSriSvFSvVo5Wm7fyfbHmHR1uMPWl/kCm5DUsuudf+TgZMrPO9ieYBsTwW2aWf9qArinUBKuNrR9qnAx9pZf1BH57H92Xb2H0s791/bux5gB+D3HRY6hBB6Sp0mhu9JTdNtWylJOwMPAmfk7tbQhqT7SD88LurpsoQQwmKi27bxbN8MtHuvr0jSKqT7hG3tZPul7pxb0nHAXm1WX54TXDeN/EhMCCE0pyZ+BKVSva7yrFSuIKueRaiLmD+j82c0e6XXWt4tJe40lTPI98DhR5USF+DC+37V9U7d8L0R7Q2Srt2LLufvDuAbc4aUEnewyinzqv0GlRIXYK7nlRL3/f2WLSXusy1vlhK3bvrAaNs+W3mGEEJoTm7i7thKReUZQgihsaLbNoQQQqhSE89ZW6moPEMIITRWtDxDCCGEKs2PAUMhhBBCdaLbNoQQQqhSH+i27XUzDHVF0hckWdLGJcQ+WtJDOQ/oxDzvbrUxhkrar95lCyGE3sItLRUvzarPVZ6kTCT/yH/WjaTDgF2AkTkX6E4szNlZjaFAQytPSdHDEEJoHi2ufGlSfarylDSYNCH6V0m5PpHULyfPfkjSTZKuy1lOkDRc0u2S7pN0g6Q1Ogn/Q+Abtl8DsP2a7T/mOHMkrZpfj5A0Pr/+eG6lTpU0RdIQ0uT1O+Z135U0SNIFkqbnfT6Rjz1I0jW5zHMkfUvSUXmfuyWtnPfbQNL1+RrubG1xSxoj6Zyc4/T/2vmsDpU0SdKkOXM7SswSQgglqGPlKWk3SbMkPSrp2A722VvSA5JmSrqkHpfQ11okuwPX235Y0kuShgPrkVp7mwKrkyaVP1/SQOAMYHfbL0jahzT13iFtg0paHhhie3aV5TkaONz2hFyxvw0cCxzdmjVF0vcA2/5wrvhulLRRPn5zUlLtQcCjwA9sbyXp18CBpNRm5wKH2X5E0kdJqdw+mY9fC9iuTaJsSCc8Nx/LHut8rnl/3oUQ+p46Tc8nqT9wFqlX8ClgoqRxrXme8z4bAv8DbJ/TPa5ej3P3tcpzX+C0/Pqy/H4AafL2FuBZSbfl7R8iVU43SYKUbPuZOpdnAvArSRcDV9l+Kp+raAdSJY7thyQ9AbRWnrfZfh14XdKrwF/z+unAsFwhbwdcXoi7dCH25e1VnCGE0JNcv+7YkcCjrQ0bSZeRGlEPFPb5GnCW7ZcBbD9fjxP3mcozd2N+EviwJJMqQwNXd3QIMNP2tl3Ftv2apLmS1u+g9TmfhV3ggwrHnSzpWuDTwARJ/1X5FQHwTuF1S+F9C+nvrh/wSr4H2543OlgfQgg9p4rKU9KhwKGFVefmnjOANYEnC9ueAj7aJsRGOc4EUr1wgu3rqy1yW33pnudo4E+217U91PbawOPAf4A9873P9wGj8v6zgNUkbQsgaaCkzTqJ/3PgrNyFi6TBhdG2c4DWNGB7th4gaQPb023/ApgIbAy8DhTTVdwJ7J/33whYJ5etS/n+6+OS9srHS9IWlRwbQgg9pop8nrbPtT2isJzb9QkWMQDYkPTdvy/we0kr1noJfany3JfFW5lXAu8n/Rp5gJQcejLwqu13SRXuLyTdD0wldYF25LfAbaQ+9RmkSq91HPWJwGmSJgHFbtLvSJohaRowD/g7MA1YIOl+Sd8l3aPsJ2k6MBY4yHaxxdmV/YGv5muYSeqyCCGE5lW/AUP/BtYuvF8rryt6Chhne57tx4GHSZVpTWT3/bEikgbbnquUIPte0o3jZ3u6XM2irAFDA1TOb7MB3XpCqDK9LZ/nyyXlmYTyclgO1sBS4g5S/1LiQnmfxTIlPUVWZj7P6/51Xc3/A75+2G4Vf+cMOef6Ds+XH8N7mPTo4L9JPXz72Z5Z2Gc3YF/bX8lPRUwBtsw5n7utz9zz7MLfcjN9KeCnUXGGEELP8YL6TH5ge76kbwE3kO5nnm97pqSTgEm2x+Vtu0p6gNQzeEytFScsIS3Pakg6C9i+zerTbF/QE+VphEOGji7lH8HAklqIb5Q4gHjlklpFp076eSlxDxh+VClxAZYv6bN4w/NLiTuP8majWbakFuIbJbVoV9LSXe/UTb+fc3nN/2O/9tVdKv7OWf4PN5XX1VSDJaXlWTHbh/d0GUIIoS+r46MqPSYqzxBCCI0VlWcIIYRQpead771iUXmGEEJoKM/v/bVnVJ4hhBAaq/fXnVF5hhBCaKwYMBRCCCFUqw+0PDudAkbSKoV8lM9K+nfh/VKNKmQHZRss6XeSHsu5LMfnlFzVxhklqbNp+XqEpKF5GsAQQuhT3OKKl2bVacszz8KwJYCkE4C5tn9ZRkEk9a8yfdZ5pInfN7TdImk9Us7Oao0C5gL/7Max3dKNaw0hhL6jr7c82yNpuKTbc2vvBklr5PXjJf1C0r2SHpa0Y15/kKQzC8f/TdKo/HqupFPzpObbSjogHz81tyrbnaxS0gaktDM/ynk6sf247WvbttgkHZ0rfiQdmbOJT5N0maShwGHAd/M5d8zH35r3uUXSOvnYMZJ+K+luSbNzi/V8SQ9KGlM4366S7pI0WdLlOecmkubkz2cysFcnn+39+fM4vLB+qKQ7c8zJrS1lSRdK+kJhv4sl7S5ps8LnOE0pGWzbcx0qaZKkSbNerzbHdwghdJ/nV740q2orT5ESN4+2PRw4H/hZYfsA2yOB7wDHVxBvOeAe21sALwH7kCZt35I0B+H+HRy3GTC1G623Y4GtbA8DDrM9BzgH+LXtLW3fma/vj3mfi4HTC8evBGwLfBcYB/w6l+XDkrbMkw7/CNjZ9tbAJKA4f9pLtre2fVkH5bsAOCJ/HkXPA7vkmPsUyvQH4CAASSuQssJcS/pBcFr+HEeQsgosopjm50ND1u/4EwshhDpzS+VLs6p2wNDSwObATZIgTcT7TGH7VfnP+4ChFcRbQEobBmlW/OGklF8Ay5AqjXqaBlws6Rrgmg722Rb4Yn79J+D/Ctv+ats5fdhztqcDSJpJut61SF3HE/I1LAXcVTh+bEcFyxPXr2j7jsK5P5VfDwTOlNT6o2IjANu3Szpb0mqkPKJX5omS7wKOk7QWcJXtRzr7UEIIoaGauFKsVLWVp4CZtrftYHtrHsoFhdjzWbSFO6jw+u1C61GkFl8luZtmAlt0cO+ws/N9BvgY8DlS5fLhCs5V1Hp9LYXXre8HkK77Jtv7dnD8G1Wer9V3geeALUjX9nZh24XAAcCXgIMBbF8i6R7S9V4n6eu2b+3muUMIoa6auUVZqWq7bd8BVpO0LYCkgZI26+KYOcCWkvpJWhsY2cF+twCjJa2eY68sad32drT9GKlL9ETlJl6+L/gZUiWzutJI4aWBz+bt/YC1bd8G/ABYARgMvA4MKYT/J6kigtRtfGcX11d0N7C9pA/mcy4naaNKDrT9CvCKpB0K5261AvBMvr/7ZVKLv9UYUjc5th/I510fmG37dOAvwLAqriGEEErVF7ptq608W4DRwC/yoJappPtsnZlAGhX7AOle3eT2dspf/D8CbpQ0DbgJWKOTuP8NvA94NA8QGgM8b3secBIp6fVNwEN5//7ARbnLdQpweq6w/grs0TpgCDgCODiX4cvAt7u4vuI1vEC6B3lpPv4uYONKjye1HM+SNBUWyed1NvCV/JlvTKEFa/s54EHS/dJWewMzcpzNSa3TEEJoCl6gipdmFfk8ezlJywLTga1tv9qdGJHPc6HI57lQ5PNcKPJ5LlSPfJ7PfmxUxd85779jfFPWoFU/qhKah6SdSa3OM7pbcYYQQqO5RRUvzarpp+fLA1/a/oz6cutI195I0lnA9m1Wn2b7gvb274jtm4F27wtXY63FPt76eHqRMVX1s1qJk1u96HdLiVtWC/Gi+35VSlyAZT6wYylx916jo2EPtRlSUksZ4O2SejuWKekreAjtPiLfNJr5Xmalmr7ytF31lHvNzvbhXe8VQgh9k928LcpKNX3lGUIIoW+JlmcIIYRQpZYmHkVbqag8QwghNFQzDwSqVFSeIYQQGioqzxBCCKFKfWF6gag8QwghNFRfaHkuEZMkSFqQp9+bmfNlfi/PdVuv+KMkvSppiqRZku6Q9NkKjnsv16mkwyQdWK8yhRBCs7JV8dIVSbvl791HJR3byX57SrKkEfW4hiWl5flWzm1Jnnj+EmB5Kss5Wqk7bbdOQr8lcI2kt2zfUsnBts+pRyEkDbCbOYVsCGFJt6BOo20l9QfOAnYh5S2eKGlca5KMwn5DSPOU31OXE7OEtDyLbD8PHAp8S8lQSXdKmpyX7QAkXSjpC63HSbpY0u4VnmMqaXL6b+VjV5N0paSJeWk7uxCSTpB0tKSNJd1bWD80T2aPpOGSbpd0n6QbJK2R14+X9BtJk0ip1h6X0nQrkpYvvi/EPVTSJEmTJr/+aFWfYQgh1KKOLc+RwKO2Z9t+F7gMaO97+qfAL1g0nWNNlrjKE8D2bFKWldVJCbd3sb01sA8p8wvAH0gZUpC0Ail7zLVVnGYyCzOqnAb82vZHSEmrz+ukbA8BS0laL6/aBxibK78zgNG2hwPnAz8rHLqU7RG2TwTGk3J5QkqvdlXONlM8z7l5/xFbD/lgFZcVQgi1qWZu2+IP/bwcWgi1JvBk4f1Ted17JG1NSkdZzfd3l5aUbtvODATOzF2tC4CNAGzfLulsSauRKrwrq+wOLf5k2hnYNKceBVhe0uBOjv0zqdI8Of+5D/AhUnqxm3Kc/sAzhWPGFl6fB3wfuIaU5uxrVZQ7hBBKVc1oW9vnAud25zx5bMuvyA2heloiK8+cLHoBqdV5PCmB9haklnixWX8hcACp9XZwlafZipTxhBx3G9uLdBkUKtO2xgKXS7oKsO1HJH0YmGl72w6OKeb4nJC7e0cB/W3PqLLsIYRQmjqOtv03sHbh/Vp5XashpEbH+Px9+35gnKTP255Uy4mXuG7b3JI8BzjTKZnpCsAztltIya+L6QjGAN+B95J1V3qOYcCPSTeyAW4kJdlu3b5lZ8fbfoxUuf+YhS3KWcBqkrbNMQZK2qyTMBeSBkZVlaklhBDKtqClX8VLFyYCG0paT9JSpIbOuNaNtl+1vartobaHAncDNVecsORUnsu0PqoC3EyqzE7M284GviLpftI9ymIL7jlS67GSCmjH1kdVSJXmkYWRtkcCIyRNk/QAcFgF8caSWr1/zmV5FxgN/CKXdSrpPmxHLgZWAi6t4FwhhNAwduVL53E8nzQw8wbSd/Wfbc+UdJKkz5d5DUtEt63tDpPb2X4EGFZY9YPWF5KWBTakiwrI9nhSC7aj7S+S7lu2XT+G1LrF9glttv0S+GWbdVOBj7UTZ1Q7p90BuML2K52VPYQQGq2ljinJbF8HXNdm3U862HdUvc67RFSe3SFpZ9KI21/bfrWny1MNSWcAnwI+3dNlCSGEtiKfZx9m+2Zg3eI6Sf9Felao6HHbezSsYBWwfUTXe4UQQs+IuW2XMLZvIPWt9ykP+PVS4u73TmdP43Tfdhs9XUpcgG/MGVJK3FX7DSol7jIf2LGUuABvPX1nKXH32Lqc33ZvubwhHMstOsdI3bzNglLivkZzTzJWz27bnhKVZwghhIaqYBRt04vKM4QQQkP1gV7bqDxDCCE0VnTbhhBCCFWK0bYhhBBClVp6ugB1EJVnCCGEhjK9v+XZK4c85WzgFxXeD5D0gqS/dTPeipK+WXg/qppYOZ/mrDz93kOSzpS0YgXHzZG0an79z+6UPYQQepv5VsVLs+qVlSdp/tnNJS2T3+/CojPpV2tF4Jtd7tW5/W0PI0319w7wl2oOtt3ZPLUVkRQ9CSGEpmdU8dKsemvlCWkuw9aEz/tSmH9W0sqSrsktwbtzlhMknSDp/NxSnC3pyHzIycAGefL4U/K6wZKuyC3Ji9VJ/rCiPIH794F1JG2Rz3uApHtz/N9JWmyuXUlz85+XSfpMYf0YSaMl9Zd0iqSJ+bq+nrePknSnpHHAA3lC5O8Ujv+ZpG+3c773EszOnvtEJZcWQgh10VLF0qx6c+V5GfAlSYNIrb17CttOBKbkluAPSem5Wm0M/BcwEjhe0kDgWOAx21vaPibvtxUpHdmmwPrA9pUWzPYC4H5gY0mbkCaF3952a8Lt/Ts5fCywN0BOsbMTcC3wVeBV2x8BPgJ8TdJ6+ZitgW/b3gg4HzgwH9+PlKLnItqwfa7tEbZHrD943babQwihNH2h5dlru/lsT5M0lNTqvK7N5h2APfN+t0paRdLyedu1tt8B3pH0PPC+Dk5xr+2nACRNBYYC/6iiiK1/6zsBw4GJufG6DCkJd0f+DpwmaWlgN+AO229J2hUYJml03m8FUsaXd3NZH8/XO0fSS5K2ytc2xfZLVZQ7hBBK1cwtykr12sozG0dK2zUKWKXCY94pvF5Ax59BpfstJnfLfpiUX2514I+2/6eSY22/LWk8qXW8D6mFDakyPiLPr1s81ygKOUiz84CDSFnTz6+03CGE0AgLmrhFWane3G0LqWI40fb0NuvvJHeN5srlRduvdRLndaAuM4LnbuCfA0/angbcAoyWtHrevrKkrvpJxwIHAzsC1+d1NwDfyPGRtJGk5To4/mpSq/Uj9MGJ7EMIvVuLKl+aVa9ueeZu1dPb2XQCcL6kacCbwFe6iPOSpAmSZpC6Ta/tRnEulvQOsDRwM7B7jv2ApB8BN+Z7kPOAw4HORuncCPwJ+EsegASpNTkUmJwHL70AfKGD63lX0m3AK/n+awghNI2WPtDy7JWVp+3Fcl3ZHg+Mz6//QzsVi+0T2rzfvPB6vza7jy9s+1YX5RnVxfaxpNZk2/VDC68HF17PA1Zus28LafDTD9sp5/jiilxJbwPs1Vm5QgihJ/SFieF7e7dtaEPSpsCjwC22H+np8oQQQlt94VGVXtny7CmSrgbWa7P6B20H8fQk2w+QHq0JIQBHnZ8AACAASURBVISm1FLZY/NNLSrPKtjeo6fLUIalWGzOhrq4fOk3S4l7+7/eX0pcgMF6t+uduuENzy8l7t5rjCwlLsAeWx9RStyrJ59RStwDhx9VSlyAlpI6GgeUdO+vrH9v9dIXBmJE5RlCCKGhmnkUbaWi8gwhhNBQMdo2hBBCqFKMtg0hhBCqVM9JEiTtllNCPirp2Ha2HyXpgZxQ45YKJqmpSFSeIYQQGqpej6rkqVDPAj5FSuKxb35cr2gKMCInCrkC+L96XENUniGEEBpqgSpfujASeNT27Dwb22Xk2d1a2b7NduvQ/7uBtepxDX228lTyD0mfKqzbS9L1nR3XzXMtyLk6Z0q6X9L38iw/nR0zNE8HiKQRktqbZjCEEPqcalqexdzDeTm0EGpN4MnC+6fyuo58lTQFa8367IAh25Z0GHB5nud1APC/pAnTqyZpgN3hw1Nv5Vyd5AngLwGWB46vsKyTgEndKVcVZQwhhKZQzcxBts8Fzq31nJIOAEYAH681FvThlieA7RnAX4EfAD8hJYU+TtK9kqZI2h3eawXeKWlyXrbL60fl9eOAByo85/PAocC3cuu3v6RTJE3MN6y/3vaYfJ6/SeonaY6kFQvbHpH0PkmrSboyx5koafu8/QRJf5I0AfiTpDskbVk4/h+StmjnnO/9mnt07pxKP9IQQqiZVfnShX8Daxfer5XXLULSzsBxwOdzPuea9dmWZ8GJwGRS0ui/AbfaPiRXUPdKupmUnHqXnEtzQ+BS0i8UgK2BzVuTTVfC9ux8I3t1Uv/7q7Y/khNcT5B0I+2M1rbdIukvwB7ABZI+Cjxh+zlJlwC/tv0PSeuQUo1tkg/dFNghJ83+CimX53ckbQQMsn1/O+d679fcfuvu0RdGjocQeok6zlk7EdhQ0nqkSvNLwCJJPiRtBfwO2C03buqiz1eett+QNBaYC+wNfE7S0XnzIGAd4GngzNxiWwBsVAhxbzUVZzt2BYZJGp3frwBsCDzcwf5jSa3kC0j/EFqzsewMbKqFc0IuL6k1E8s422/l15cDP5Z0DHAIMKaGsocQQt3Va3o+2/MlfYvUmOgPnG97pqSTgEm2xwGnAINJt/AA/mX787Weu89Xntl7956BPW3PKm6UdALwHLAFqSv77cLmN6o9maT1Sf8+ns/nPKLt5PGShnZw+F3AByWtRkqr9v/y+n7ANraLZSP/Y3ivjLbflHQTqcW7NzC82vKHEEKZ6jk9n+3rgOvarPtJ4fXO9TvbQn36nmc7bgCOyMmkW5vzkFqDz+ScmV+G7s+Uniu9c4AzbTuf8xuSBubtG0larqPj8zFXA78CHrT9Ut50I/DeTN3F+5rtOI+UJHyi7Ze7ey0hhFCGSEnW+/wU+A0wLT9K8jjwWeBs4EpJBwLXU31rcxlJU4GBwHzgT6TKD1JFNhSYnCvtF2gnUXcbY0l9+QcV1h0JnCVpGunv7Q7gsPYOtn2fpNdIXb8hhNBUmrlSrNQSUXnaPqHwdrHRrjlp9LDCqh/k9eOB8RXE77ClmluzP8xL0avA5u2dJz+6skjHhu0XgX3aiX9C23WSPkDqVbixq7KHEEKj9YURiktat22fl1vP9wDH5Yo7hBCaSj3ntu0pS0TLsx4krQLc0s6mnQr3JXuc7QuBC3u6HCGE0JFIhr0EyRVkZ4N0Qhuz3n2xlLhvD1yplLgAq/YbVErcV/xuKXGHpHFopXjL5XRMHTj8qFLiXnjfr7reqZu2H3ZwKXGPbelsJrnuu2TpuaXErZeWPtBxG5VnCCGEhuoL95Oi8gwhhNBQvb/dGZVnCCGEBouWZwghhFCl+er9bc+oPEMIITRU7686o/IMIYTQYH2h27YhkyRIWlHSN+sc87oct+6xKzz/ByRdUcd4nY4tzzlHZ1QZc0whm0sIITSFFlzx0qwaNcPQikBdKzjbn7b9ShmxKzz/07ajYgohhCq5iqVZNaryPBnYQNJUSafkZYak6ZL2AZA0StIdkq6VNEvSOXny9nZJmiNp1bax87ZjJE2UNE3SiXndUEkP5dbYw5IulrSzpAmSHpE0spNzfTzHnyppiqQhxZagpPMK21+QdHxH5eiKpMGSbpE0OX8+uxc2D8jlflDSFZKWzccMl3S7pPsk3SBpjQrOc6ikSZImPTp3TiVFCyGEuugLWVUaVXkeCzxme0vgbtJMPVuQEjyfUviyH0lKu7UpsAHwxWpi2z5G0q6kZNMj83mGS/pY3veDwKnAxnnZD9gBOJrFJ24vOho4PJd/R+Ct4kbb/5237Q68CIzpohydeRvYw/bWwCeAU1tTqAEfAs62vQnwGvDNnOrsDGC07eHA+cDPujqJ7XNtj7A94oODh1ZQrBBCqI8FuOKlWfXEgKEdgEttLwCek3Q78BFSZXCv7dkAki7N+1Z7X3HXvEzJ7weTKrF/AY/bnp7jzwRusW1J00lpwzoyAfiVpIuBq2w/tbA+SyQNAi4nJb5+QtIRHZTjji7KL+B/c0XbAqwJvC9ve9L2hPz6IlKasutJ2VluymXqDzzTxTlCCKHHNHOLslLNNtq27c+M7vzsEPBz279bZKU0FHinsKql8L6FTj4L2ydLuhb4NDBB0n+RWohF55Aq1ps7K0cF9gdWA4bbnidpDtA64Wp7n4+Amba3rfI8IYTQI9zELcpKNarb9nVgSH59J7CPpP6SVgM+Btybt42UtF6+17kP8I8qYwPcABwiaTCApDUlrV5L4SVtYHu67V+QklRv3Gb74cAQ2yfXoRwrAM/nivMTwLqFbetIaq0k9yN9PrOA1VrXSxooabNuXGYIITREX7jn2ZCWp+2X8sCcGcDfgWnA/aSW0/dtPytpY1LFdCbp3uRtwNXVxs73PTcB7srdmHOBA6gtC853ckXWAszM11AclHM0ME/S1Pz+HNvndFCO57s418XAX3NX8iTgocK2WcDhks4HHgB+a/vd/DjK6ZJWIP2d/iaXM4QQmk4zP4JSqYZ129rer82qY9rZ7TXbn60w3tCOYts+DTitncM2L+xzUOH1nOK2ds51RDur3zvG9nodHNdROdrbd3D+80Wgoy7YjdtbaXsqqQXfdv1BlZw7hBAaqfdXnc13zzOEEEIfN78PVJ9NU3naHg+Mb7te0j3A0m1Wf7l11Gw9SToY+Hab1RNsH16n+KsAt7SzaaecbDuEEPq8vjBgqGkqz47Y/mgDz3UBcEGJ8V8iPfPZVJbueC6Kmuw3cGgpce/R66XEBZjreaXEXVbl/K/2tmu5ld+55TSwlLhl3e/aftjBpcQFmDCtnK+F0VsfWUrcVTSo6516UDMPBKpUo0bbhhBCCEBqeVb6X1ck7ZZnpXtU0rHtbF9a0ti8/Z782GLNovIMIYTQUPV6VEVSf+As4FOkmen2lbRpm92+Crxs+4PAr4Ff1OMaovIMIYTQUAvsipcujAQetT3b9rvAZaRpUot2B/6YX18B7FSY8rTbovIMIYTQUHVMSbYm8GTh/VN5Xbv72J4PvAqsUus1ROUZQgihoaq551nMAJWXQ3u6/NALRtuGEELoW6oZbWv7XODcDjb/G1i78H6tvK69fZ6SNIA0BWrNjwbWveUpaUVJdU1OLem6HLfusWulhXlFS48jaW6VMU+QdHRtJQshhPqqY7ftRGDDPCf6UsCXgHFt9hkHfCW/Hg3cand9M7UrZXTbrgjUtYKz/Wnbr5QRu5GURFd5CGGJVq9HVfI9zG+REnE8CPzZ9kxJJ0n6fN7tD8Aqkh4FjiLlgK5ZGV/kJwMbSJoq6ZS8zJA0XdI+AJJGSbpD0rX5+ZxzOqtUCq2yRWLnbcdImihpmqQT87qhkh6SNEbSw5IulrRznkD+EUkjOznXYEkX5PJOk7RnXr9vXjdDUrtDnSUdlbfPkPSdQllmSboQmMGiXQwdleEaSfdJmtm2f1/Sr/P6W5Sy0iBpA0nX52PuzJPshxBCU6rjaFtsX2d7I9sb2P5ZXvcT2+Py67dt72X7g7ZHtuaMrlUZleexwGO2twTuJs2oswWwM3CKpNZsJCOBI0jP5mwAfLGa2Dl7yq6kBNMj83mGKyWRhpSZ5VTSZOobk1J47UDKgPLDTs7xY+BV2x+2PQy4VdIHSM8GfTKf5yOSvlA8SNJw4GDgo8A2wNckbZU3bwicbXsz209UcJ2H2B4OjACOzNP6ASwHTLK9GXA7cHxefy4pCffwfH1nd3WC4k34Wa8/XkGRQgihPurYbdtjyu5C3AG41PYC28+RvvA/krfdm5/NWQBcmvet1q55mQJMJlWSG+Ztj+ccnK1pxG7J/dzTgaGdxNyZ9NAtALZfzmUeb/uF3E1wMYtnMdkBuNr2G7bnAlcBO+ZtT9i+u4rrOlLS/aQfH2sXrqkFGJtfXwTsoJQvdDvg8pwS7Xcsmi6tXbbPtT3C9ogPDWk3KUwIIZQi8nnWpu1Piu78xBDwc9u/W2Rlmn7pncKqlsL7Fhp/3W9UuqOkUaQKfFvbb0oaD3Q0UaVJP4BeyS39EEJoen1hYvgyWp6vA0Py6zuBfST1z/fnPgbcm7eNzCOk+gH7AP+oMjakm8SH5NYXktaUtHqN5b8JeC+LiqSVcpk/LmnVPB3UvqRWdNGdwBckLStpOWCPvK5aK5Cmknoz37vcprCtH2m0GKRu6H/Yfg14XNJeubyStEU3zhtCCA0R3bbtyJlDJkiaQUrqPA24H7gV+L7tZ/OuE4EzSSOkHgeuria2pFNs3whcAtwlaTpp6qUhnQbp2v8DVsrnuB/4hO1nSPdbb8vXcp/tv7Qp22RgDKmivQc4z/aUbpz/emCApAdJA6SK3b1vkH50zCDdfz0pr98f+Gou70wWn54qhBCahu2Kl2alnihc7po82vZnG37ysJiDh+5Zyj+CzVqWKSNsqSnJBlDzlJftWkr9S4k7z+XdFepX0mdRVmvi0Xn/KSUu9MKUZP3KS0l2/pwrav6Hsevau1X8j+DGJ68v5x9ijWKGoRBCCA3VzN2xleqRytP2eGB82/WS7gGWbrP6y7an17sMkg4Gvt1m9QTbh7e3fx3P27BrDCGEZtTM3bGVaqqWp+2PNvBcFwDl9MV0ft6GXWOlXvW8UuKOnf9CKXFXGzC4lLgA7++3bClxX/O7pcRdpsT/hd9mQSlxy+oaP7albTKN+imre/WKyaeXEnff4d8pJW69RMszhBBCqFJfeFQlKs8QQggNVcm0e80uKs8QQggNFd22IYQQQpWi8gwhhBCqFKNtQwghhCr1hZZnjyRmlrSipLomtZY0t57xOjnPCZKO7mT7SZJ2bmf9KEl/6+S4gySdWcu5OzimIZ9LCCFUql7JsHtST7U8VwS+SQV5J+tJ0oCcUqw0tn9SZvwQQujtFpQ4rWSj9EjLkzTh+QaSpko6JS8zJE2XtA+811K7Q9K1kmZJOidnYOmQpF9LminplpzFBUnjJf1G0iTg25I+J+keSVMk3SzpfXm/EySdn/efLenIQtzjJD0s6R/Ah7oowxhJo/Pr3SQ9JGkylSX7bo3RbhmzLSTdJekRSV8rHHOMpImSpkk6sdJzhRBCo/WFieF7qvI8Fngs56C8G9gS2IKUx/IUSa3JnEcCRwCbAhvQeQW0HDDJ9makdGHHF7YtlRM/n0pKfbaN7a2Ay4DvF/bbGPivfN7jJQ2UNBz4Ui7jp1mYzLtTkgYBvwc+BwwH3l/JcVlnZRxGyqiyLfATSR+QtCspYfbIXM7hktom625bvkMlTZI06fG5T1RRtBBCqE1fSEnWDAOGdgAutb0AeE7S7aQK6jXgXtuzASRdmve9ooM4LcDY/Poi4KrCtrGF12sBY3MFvRQpHVqra22/A7wj6XngfcCOwNW238zlGFfhdW0MPG77kXzcRcChFR7bWRn/Yvst4C1Jt5EqzB2AXYHWFGiDSZXpHR2dwPa5wLkAX1z38837LzSE0Oc0873MSvVUy7NSbT/haj7x4r5vFF6fAZxp+8PA14Fi7p53Cq8X0HM/LjorY3ufiYCf294yLx+0/YcGlTWEEKrSYle8NKueqjxfZ2HS6juBfST1z/cpP0ZKKA0p8fN6+V7nPqTuzI70A0bn1/t1su8KwL/z669UUNY7gC9IWkbSEFI3bCUeAoZK2iC/37fC47oq4+6SBklaBRhFSip+A3CIpMEAktaUtHoV5wshhIaJ0bbdZPslSRMkzQD+DkwD7ie1or5v+1lJG5MqhjOBDwK3AVd3EvYNUmX7I+B5UmXbnhOAyyW9DNwKrNdFWSdLGpvL93wuUyXX+LakQ4FrJb1J+pEwpIvDKinjNNJnsSrwU9tPA09L2gS4SxLAXOCAXN4QQmgqfWG0rZp1NJOkUcDRtj/b02Xp68q65/nkvFfKCBspyQoiJdlCe71Tzt8dwB+Xeq2UuL0xJdkVT4yr+S9wo9VGVPyd8/ALk8r5B1OjZhgwFEIIYQnSzN2xlWraytP2eGB82/WS7gGWbrP6y7anN6BYxXKcBWzfZvVpOcl2Z8cdDHy7zeoJtg+vZ/lCCKFZNWogkKSVSU9bDAXmAHvbfrnNPlsCvwWWJw0U/ZntsXShabttQ+PMPaqcbtvTrqz0Fm91HtbbpcQFeKHlrVLirtlvuVLiDqF/KXEBXqOcybjeKGmSr3mUdx9teS1VStyyuvMvve83pcQFGLjq+jV3o66/6lYVf+fMfnFKt88n6f+A/9g+WdKxwEq2f9Bmn40A235E0geA+4BNbHd636lpW54hhBD6pgUu5356O3YnPZUA8EdSb+Yilafthwuvn87P+K8GdFp5NvtzniGEEPqYaqbnK86GlpdKJ5sBeJ/tZ/LrZ0kT33RI0kjSxDSPdRU4Wp4hhBAaqppp94qzobVH0s20P/3pcW3iWFKHJ84zuv0J+Ird9bM0UXmGEEJoqHqOtbG9WArIVpKek7SG7Wdy5djus++SlgeuBY6zfXcl541u2xBCCA3VwOn5xrFwlravAH9pu4OkpUgT8Fxou6O50xcTlWcIIYSGauD0fCcDu0h6hJS162QASSMknZf32Zs0LexBOU3m1Pz4Sqei27bO8lDn022PbmfbeNKsSZM6OHYOMML2i53En2u74il2JJ0AzLX9y0qPCSGEMjVqej7bLwE7tbN+EvDf+fVFpExcVYnKs5skDbAXf2AtzzW7WMUZQggh6QvzCywx3baShuaJ6FvfHy3pBElHSnpA0jRJl+Vty0k6X9K9kqZI2j2vP0jSOEm3Ard0dZ6cieUySQ9KuhpYporyXiPpPkkz2w7NlvTrvP6WnIkGSRtIuj4fc2eeWD+EEJpOpCTrG44FtrI9DDgsrzsOuNX2SOATwCmSWqeI2RoYbfvjFcT+BvCm7U2A44HhVZTrENvDgRHAkTkFGcBywCTbmwG357iQhnIfkY85Gji7s+DFZ6fOn/ZEFcUKIYTaVPOcZ7OKbtuU4utiSdcA1+R1uwKfl3R0fj8IWCe/vsn2fyqM/THgdADb0yRNq6JcR0raI79eG9gQeAloIc3VCKmf/qqcx3M7Uhqz1uPbzv+7iOKzU2VNzxdCCO2p5jnPZrUkVZ7zWbSlPSj/+RlSJfc54DhJHwYE7Gl7VjGApI+S8oaWKqdj2xnY1vabeaDRoA52N+m6XrHd5QixEELoac3coqzUktRt+xywuqRVJC0NfJZ0/Wvbvo003+EKwGDgBuAI5WacpK26ec47gP1yjM2BYRUetwLwcq44Nwa2KWzrx8IBSfsB/7D9GvC4pL3yuSRpi26WOYQQSrXALRUvzWqJqTxtzwNOAu4FbgIeAvoDF0maDkwhPWLyCvBTYCAwTdLM/L47fgsMlvRgPvd9FR53PTAgH3cyUJzx4g1gZB6U9MkcF2B/4KuS7gdmkiZEDiGEptMXBgxFSrIQKckKIiXZQpGSbKFISbZQPVKSDRq0TsXfOW+//a+az1eGJemeZwghhCZQh5mDelxUnt2UBxb9qc3qd2x/tIJj72Hx0bBftj29XuULIYRm1Rd6PKPy7KZc0XVrdGslFWwIIfRVzXwvs1JxzzNURdKh+RnRXhO7t8UtM3Zvi1tm7N4Wt8zYZZa5r1piRtuGuqkmi3uzxO5tccuM3dvilhm7t8UtM3aZZe6TovIMIYQQqhSVZwghhFClqDxDtcq8L1JW7N4Wt8zYvS1umbF7W9wyY8f9zirFgKEQQgihStHyDCGEEKoUlWcIIYRQpag8QwhNJc/eFUJTi8ozhApJ6i/plyXF3iCnykPSKElHSlqxTrHLmz2+HGdLulfSNyWt0NOFCaE9MWAodEnSRsAxwLoUpnS0/ck6xH4f8L/AB2x/StKmpCTgf6gx7lXAH4C/2/VLCijpbtvbdL1n1XGnAiOAocB1wF+AzWx/ug6xZwNXAhfYfqDWeG1iHwFcZPvlOsfdEDgE2IuURvAC2zfVEO+LnW23fVU34x7VRdxfdSdumXpjmZtRzG0bKnE5cA7we2BBnWOPAS4AjsvvHwbGkiq+WpwNHAycLuly0pfvrBpjAkyRNI70mbzRurK7X74FLbbnS9oDOMP2GZKm1Biz1RbAl4DzJPUDzgcuy0nUa/U+YKKkyTnuDa7DL3Lbj0j6ETAJOB3YKien/2E3P+vPdXY6oLt/f6Xk3ZP0OryXeqQ1JZfza9tevobw5eQKXMJEyzN0SdJ9toeXFHui7Y9ImmJ7q7xuqu1uTbrfTvwVgH1JlfOTpB8AF+Xk6N2Jd0E7q237kO6X8r1MO78hlfNzth+XNMP25rXEbec8HwcuAVYErgB+avvRGmMK2JX0Y2UE8GfgD7Yf62a8YTnWZ0iJ6/9ge7KkDwB32V63lvKGUA9xzzNU4q/5/tMaklZuXeoU+w1Jq5B/ZUvaBni1HoFz3IOA/wamAKcBW5O+kLvF9sHtLDVVnNnBwLbAz3LFuR6Lp7zrlnyv9vOSriZV0KcC6wN/JXUR1yS3NJ/Ny3xgJeAKSf/XzZBnAJOBLWwfbntyPs/TwI9qKauk90n6g6S/5/ebSvpqLTFznI0k3SJpRn4/LLecayZpB0kH59er5n8b9YhbWpmXCLZjiaXTBXi8nWV2nWJvDUwgVZgTSN22w+oQ92rgAeB/gDXabJtUQ9yNgFuAGfn9MOBHdSjv54B+Jf39zSZ1g2/XzrbTa4z9beA+4AbS/cmBeX0/4LFuxOsPXFLG55Dj/x3YG7g/vx8ATK9D3NuBkcCUwroZdYh7POlHzsP5/QeACXX6LEop85KyxD3P0Kl8j+xY22PLiO/UHfdx4EOk+zmz3M0u1Va5zPfZ3qODc46oIfzvSYOnfpdjTZN0CfD/aogJsA/wG0lXAufbfqjGeMB7I23H2D6pve22j6zxFCsBX7T9RJu4LZI+W20w2wskrS1pKdvv1li29qxq+8+S/iefb76ketzHX9b2vakH+z3z6xB3D2ArUksc209Lqtc9y7LKvESIbtvQKaeRqseUFV/S4cBg2zNtzwAGS/pmLTFzmfesSwEXt6zte9usq/kLx/YBpC/Jx4Axku6SdGitX5S2FwBVV2KVyBXzl9pWnIVzP9jN0I8DEyT9WNJRrUu3C7qosm4TvChpg0Lc0cAzdYj7rlOTsDXucnWI2aqsMi8RovIMlbhZ0tG5RVDve55fs/1K6xunRx6+Voe4t0jaU21+VtdBaV84TqNfrwAuA9YgtTom58dBajFB0pmSdpS0detSh/IuAGZJWqfWWG08BvyN9P00pLDUw1HAOGADSROAC4FaP1+Aw0m9ERtL+jfwHeCwOsT9s6TfAStK+hpwM6n3ox7KKvMSIUbbhi5Jeryd1ba9fh1iTyfd42ytjPoD02xvVmPc14HlSI/WvEV9hvgjaX1SBortgJdJraQDbM+pMe7nSYOGPkj6Qv+j7eclLQs8YHtoDbFva2e1XZ/ndO8gtZjvZdFHdz5fh9jL2n6z1jjtxB1AHW8TtIm9HOne9et1jLkLaTQzwI2u4XnXDuLXvcxLgqg8Q4+SdApp8oXf5VVfB560/b2eK1XX6v2FI+mPpEcy7mhn2062b6nHeeot369ejO3ba4i5LWmA02Db60jaAvi67Zq683PsQcA3gR1IvQd3AufYfrvGuKuQBve0xv0HcJLtl2orMUh6P2lgj4GJtp+tNWaOW1qZlwRReYYuSTqwvfW2L6xD7H6kCnOnvOom4LzcJVhLXAH7A+vZ/qmktUmjbtver6w27orAgaSZgIqzLdU68KY0KmkWp0L8dYENbd+cW8r9a/lRkZ95HQ2M88Jnf+vyzKukPwOvAxflVfsBK9req8a4NwF3FOLuD4yyvXONcf8b+AlwK6ml/HFSBXd+LXFz7FLKvKSIyjN0SdIZhbeDSBXdZNuje6hIXZL0W6AF+KTtTSStROry+kiNcf8J3A1Mz/EBsP3HGuNuQ3q+cRNgKdIjG2/U2s2cY/+dPIuT7S1yt+UU2zVPwJ7vwx0KrGx7A6Vp9c6xvVMXh3YW8x7bH9WiE2fcb3uLOpT3AdubdrWuG3EXq9wlTa/1M5Y0i/SI0Uv5/SrAP21/qJa4OVYpZV5SxKMqoUu2FxlQkVtfl9USU9Kfbe+d73ku9gvO9rBa4gMftb218hR3tl+WtFSNMQEG2a7XyM+iM0lT6F1OmqXnQNIzpfVQ1uMZkAadjATuybEfkbR6jTGflLQdYOn/t3fmYXJV1dr/vYmBMAW4EvGigIACgoiKQBhURHM/B1AUHBAQcQKvKIgDchWZPkQcUAlXlA8MMgQFGVQGAVEGwQtCgIT5YxBEUcCRQabw3j/WPunqTk919qlUpXr/nqefzjnVtc6i6D7r7LXXepemEL2kdSt3hzJX0gzb/wMgaXNCAjCXiyS9l1BXglg5X9iA3b8QK+WKR9K5JuiUzxOCEjwLdXgMyFU52Sd970gbBfB0Kj6qCpGm07JSzODktNo6F3iyOmn7r7mGbd8paXJKWc9Ogf+AXLt0UMUJ0kub3QAAIABJREFUeNL2U1VRc1rV5qaz9iLUoF4A/AG4iAjStWl5SJsCXCXpvnS8JlC7p1YDGrQiqlWrFOgk4FHgMzXtVg9odwJXS/pJus7bgXl1/e2kzxONEjwLYyLpZwzcECcBGxArpNrYfkADDfyvz3RxOI4mVIaeJ+lw4qm6Cemxp4CvERq01WdiQu4uh8fTyvgGhazdAzTXSvZpBrdnTCc+jya4TNJ/AcukqtD/JBRxcpDtXfJdG0RHHtJsd0pkvbJ7V/qq+Emu4Q76PKEoe56FMRlSUfkMcK/t+xuyfQmhUNPUSqjV9vrE/qyASzKa9ltt3g1sZvvhXFtD7K4JPEisjD4FrAh8x5mi7S32O9KekQq+PkS0UohI+x3vjBuLpDuA3xHTdc5s7QNuipRanlod276vAZsrAy8ZYneR6uleYkn0uVcowbMwJpKOtL3/WOdq2v4J0Sd4MYP7BLOqVyUdTYzduirPw0XsXgTs0In+w04haR6xR/0j15x0MortdwLn2X5yzB9uz+5mxB7wDoRG8Q9tnzL6u8Zl922EMP5qxMPKmsCtDfQVf5jYinghcAMwg5gAk9VLm7YbPgdsyOAA10SPbkd8nigUhaHCeJg5zLk3N2T7LOBAomT+upavXK4DvijpLklfl5SjZ9vKY0Rq9XuSjq6+6hqTNF/SvJG+GvJ5eyJjcLqk3yrUoppSBdoeuEPSyZK2SyvcbGxfkwqzNgP+CmRVM7dwGBEk7rC9FpGZ+J8G7O4DbEpkZV5PPBA2sWI+ldiTXQs4hFiR/7YBu9A5nycEZeVZGBFJHyP2sNZm8L7LCsRkh10bus5SwPrE3uHtblAQXCEjuCOxilnD9ksy7e0+3Pm6rSopXQsDBTHVGLJdw6w/X8fuKNd7CfGwsovtyQ3ZnEI8TL2HaLi/2PaHM+xNI6QJ3wusQ+xdn247+6FK0rW2Xy3pRuCVDgH77DYYDcylvYGo9H5S0s0NrGivs72JpHlVBXp1rRy7nfR5olAKhgqjMYcY4XQE0HoTf6SJ6lIASW8h1IXuIvbM1pK0p+0LmrBPyN2tT0rP5Rqz/YMU7Ks2kqz9QydRdUkzq57GxP6S5jL4c69NCtLvSV8LiFRgI9h+OvWSGliGSLXWDp7AjcA5hBjAbxpwsZW/S1qeyHScKulBWrYLMrg/tXCdA1ws6W/AsIL5bVL9bj0g6a3AH4GmdKU75fOEoKw8C+NC0taEisxsSasAK9geTvO2Xbu3AdtVhTEK0fXzbK+faferxOrlLqLw5OwmCk8kbUOkEH9HBPvVgd1ziyzS0//HbV+ZjrckCoZekeUwCxV7phAV0j+yfXeuzRbb1YpzG+BSomfwItu1J81IUk7B0Ri2lwOeIP7f7UIUZp3qBiXpUoHdisDPc7MoirFuVxC/Z7OAacAhtn+a7ejg6zTm80ShBM/CmEg6iGjcX8/2upJWA86wvVUDtgeloBQNg9c0oAS0J1Gp2XRV7HXA+2zfno7XBU6zvUmm3U2A7xM3MIi9pw/anptjN9ler/K3aSSdRjycXJBbNCTpW7b3HdIatRA3IDbfNBpjulBTGZomWRJ97kVK8CyMSVoVvZKQ5Kvk0hbuwWTaPpZIqZ5O3DDfBdxHjF7C9llt2lvf9m0aYeRWbjAa7r+7qc8i2VoRYGjrjqTd291XlbSr7VM0wixM20fV97R5JG1i+zp1Rmy+EgZY5CUypu0oJg5VggMV1bFdc/KQQhJzxJtzTjV6p3yeaJQ9z8J4eMq2JXViIO9U4M+E4DXAQ8S+2fbEH3RbwZMQBPgI0Y4wFAO5ZfjXSjqewWLaTci7AYsGzRb2of2K0+r/U+NN8ZJ+bXtrDVarab0Btx2MqoKgnCA5iu1xfQaSVnbMlB2v3XEpbUna0PbN47VLg79TQ+mgzxOKsvIsjEpKox5ISKXNJIqHPgjMsT1rtPc2dP0DbB/R6euMF0lLE5WxW6dTVwD/3el9IrWIpPcrGkHnmIGA3Mjqfgwf5trOHhS+GO3O8hDt6QZtd8TnfqGsPAujklac7wL2A/5JqNR8yQ0P5B2FdxEBe1womvZHpN008DDsldKdC1OekvYhtFg7SdtPuWP1n2am/jqxb9YpneN20Ng/0lN2s+sORqFTPvcFJXgWxsNc4O+2P9uFa7f7B7z9KK/VSQMPZXcWDZQfGOZc09S5kTUhNjGa7aH7ZhW1tH6rth1Y2FpTzQhdhsV3r+pUKm5JTPEtiT4vNkrwLIyHzYFdJN3LYAm9jqfRaPMP2PYenXBC0s7E4OS1JLW2CUwjFHBybE8CdrJ9+ig/dmW7docWGEla1g3JCo5336wOapkRSogkvBD4LgMD0wuFrlOCZ2E8/J8uXrtW6kjSqsCXgdVsv1nSBsAWtk+o6cdVxKSTVRhcjPQImSOiksrN5xiYqzjcz+xd176kLYATgOWBNSRtDOxp+z/r2myxXfVLrmX7MIXs3/NtX5NhthMzQsdL279v6TN4oe3fj/JjndoT72RqtfR7jkIJnoUxaU2ndYG6o89OBGYTo8MA7iD6EWsFz/QZ3CvpjcC/UsBbl1Avml/Tx1Z+IekzycfW1X0TPXffIh6Afpps3ijptQ3YBfgOMSd1W0I39hHgTEIztS6dmBG6kCGCH9OB5VsEP9pe3aa6gPOBjUb5mRn1vB2TtrcLRmrjqqjauTroc19Qgmehq0haC/gE8CJafh+rhnjbX65pehXbp0s6INl5RtKCTHchZN1eoxjldBEh0v0eYvWVw3vS99ahz03MCQ1D9u+rYJRo4rOA0ER9lWJwN7b/luQLc7hMzc8IBQYLfhAPV1OItqOtIOthZa6kTW03Ito+klBERcvfx4k1zFeZk6nEZ3EjsYJ9OdEis0UNmxOOEjwL3eYcYjX4M2IF0xSPSXou6QYkaQbQxMxQ2X5c0ocI+byvJhGJLDq5hwj8Psn9WSHivg8N6PwmnlYMNa8+5+nk/3/8PDEjdD6wJ3A+cHymzYp3kAQ/AGz/UVITfbBD6wJy22u+nr6/E3g+A33FOxN90bVxGj4v6SzgVbbnp+OXAQfn2J5IlOBZ6DZP2K490msU9iPSlOtIuhKYDuzUgF2lPcRdiBs8QPZ0EknLEj6vYfujiukn69k+N9c2sBeR3nsB8AdixfzxUd8xfo4mpp48T9LhxGf8xRyDKSV+DnCO7Yca8LGVTgl+NFoXUAlFSPqG7dZxej+T1JSAwnpV4EzXvEnSSxuy3feU4FnoNt9OqbSLgIXaqLkyerbnJpm39YhVQNb0kxb2BQ4ghOZvlrQ28KsG7M4m2j+2TMd/IPZ7s4OnQ983N608ku1Tk97vG4jPeQfbtVa1qfDmIGBv0qzhlGqfZfvQhlw+XdL3gJVSVe8HaWBVa/veVIj1mnTqCts35toFlpO0tpOYf9rmaCrgzxtGLaupGbJ9T1EYKnQVSUcAuxHTT6p0n50xzT6la99HFPNApCjnNFR80xE0MGdyoZKQmpkz+XpiT3m9dOpW4Bjbl2Y5PGB/I1o+Z9s3Zdjaj5gL+tGqgCc9nBxLTPv4Zq6/yeZM4D+IYH9hE4IfSSjjIwz0Eb8DOC5XhUvSm4DjgLsJf9ckKqUvzLGbbE8FPgZUxWOXA8fafiLX9kSgBM9CV5F0J7BBU/J2Ke30S+BC4HrihvNKQlpwW9u3Zdr/FcNP/MjSzJV0FbF6uzIV4KxDTGvZLMPmW4FjgEOJPT4BryLSqnvbPj/D9orAT4hRWfOS7Y0IUf+32/5nDZvXAzM9ZBJO2ke9qAl5QkkHAie2tpVI+qjt4zLtziNaoR5Lx8sBv2miFzpJQlYPKLc5c3pNoRlK2rbQbW4CVgIebMjeYcA+QwUHJO0IHA7smGn/My3/nprs1Z5d2cJBwM+B1SWdSlR/fiDT5meJNGpr+vCGtGc2iyjEqcthRGXmtrafBUiFQ0cQn3MdvdUpQwMngO2HUqFTE3wCeK+kvW1X6fa9iNVdDmJwBfMCMnowJW1r+5fDyE2uIylLZlLS6bbfrRG0hBeT+MkSTwmehW6zEnCbpN8yeM+z7uzGjWwvUhhk+0xJddteWu0Mlby7UlKOIEBl92JJc4EZxE13n+ECSZs8f7h9N9vzkohEDm8EXl4FzmR3QWoxqdv3Olr2oamG/T8AbwfOkPRj21+jGaGB2cDVks5OxztQs6c48ToigzKc3GSuzOQ+6XsvaAkvsZTgWeg2BzVs77Gar40LDRZEnwRswsAA61xeQFTuPgd4be4Kg85+Fk/ZXmTFnfpp66YVN5Y0XLpXxCq/EWzfl4rJjpV0BjECL9fmUZIuZWDazh62r8+wd1D6PqrcpGrMebX9QPo+qviJpN/YLj2fI1CCZ6Gr2L5Mg0XAlyWv9eN5Gn74s4h2lVxaBdGfAe5hoGWlNpK+TzSp30xL4RR5K4x1NFiHd+HlyBdfmCrplSy6ahOwdB2Dtsf1/11tztwcwrXpWk8Ae0j6OPEAVIshD1O/S18LX1sMRWp15ryOl8YeWPqRUjBU6CpqEQG3vU7qb/yu7Voi4KntZURsH1LHbqeRdIvtDRq2+brRXnfG0OlUODWa7dfXtT2Oa/fMnElJ9zDKdBnbjShEjXL9js157aXPuRcpK89Ct2lUBHy8wVFtDtmWtCvxsHnykPO7AQtsz2nP00X4jaQNbN+SaWch4w2Oks603VYh1XiDo6SZTbSCDDXb9hs6VCTTYWWocbnQ5etPWErwLHSbjoqAj0JbQ7aJKs3hVsNnEf1xucHzJCKA/okonMqVd2uHTq6OjgSaDp51fj86XiQj6W0M9Exe2pA61JiXXUJtL/GU4FnoNpepQyLgY9DujWGK7UeHnrT9WENtFCcQYhHzaVbjdzx08mGlJ27AVZEM8DCLTsW5INe+pK8Qk2ROTaf2kbSl7f/KtT0Gbc95hYVtRb8YI4OwWz2XJgYleBa6zSIi4Lb/32K4brsBYxlJy1VN8BUKUfHcKSIAD9kerrhnSacTgTknIHdqKs5bgFe09Lz+gBDpqBU8Ryh6W4jto9L3WnNeU1vRs5JWtD3swIQctaiJQAmehW7zCdvfBhYGTEn7pHOdpN0b8AnAjyXtVZX4S3oR8N/k9fNVXC9pDrHqbu13zam2HS89sTqEhSuim22vP8qP1Somqy7hDkzFSawEVNW1ue1L1aSX9YgVbfVgtT2Q3VeceBSYL+liBs+Q/WRD9vuaEjwL3WZ3Fh3o+4Fhzo2bdAP+5BhaqG0N2bb9dUmPApdLWj6dfhT4iu1ja7rayjJE0PyP1suS16oCgKTtgfNaBQ2GsH/uNUbhd+38cFoR3S5pDdv3jfAzOe0fUgem4hD759enKmQRe5+fr2usKnyTdDkxNuyRdHwwcF62t8FZNPD7NVEprSqFriBpZ0K8fWvgipaXVgCerduq0mL/mhxd2DFsrwBQ3dCGvNZ203qnkXQKMeD4TOD7ufq+w9jfkkWHmZ+UYe9yQo/4GgaviOqqTrXafi0hsXil7SOT8Py+Tay2JP07sUoEuMb2nxqweTuh5PRkOl4amGd7vdHfOW77yxBj8G5vwt5EogTPQldIwghrEU/srU/ojxA3hyy9WEnfBKYAP2LwDThr1Nk4rlurN07SCwm92a3SqSsIib77G/JrGjFIeQ9iRTubEJ5f5AGgTbsnA+sANzCg7eqcYDRSf2pOX2ob155lu21dXknvAH5Z7R9KWgnYxvY5mf58AXg3MTMVQvbvdNvZUpMpI/F1YCnba0l6BXBoEw8pE4ESPAt9yQhN/Hbm9JNxXLdW03rad5oDVH2kuwK72J7ZoG/PJSoo9yVGk70YONoZY7Mk3UpMxemLG0nGw88Ntl8x5FwjAgaSNmFA9u/yHNm/IXavA7Yl2mqqMXg32X5ZE/b7nbLnWegKkn5te2tJjzC4IrPqb5yWY7+TCjdjXbrm+6bbnt1yfKKkfZtwKPUf7kEEy5OAzWw/mKQQbyFWvHW5CXg+8MBYPzheJM0gfHopUck8GXgs93eiw0wa5lxT99cbiM/3OQCj7Qe3ydO2/1H1WCcWd5vUEksJnoWuYHvr9H2FsX62Dop5kwcx0LR+GZGSGrYsv8lL13zfX5KK0WnpeGfgL824xI7AN21f3nqypeq0bST9jHhQWAG4RTFZpompOBAzSN9LFHW9Gng/sG6GvcXBtZKOIqqvIZSzhk7gaRtJnyB+j//MwJgzEzrIudws6X3A5CSL+UngqgbsTghK2rbQl0g6k1gVVcU7uwEb2x46H7Hp6x5Tp/cu7QHPIgp7TNzEPuGWoc29RId1c6+1/WpJ8yqFpU5quA65dt20+3LAgcSoNhOqSocP7QuuYfdOYHPbTT1ItdpeFvgCUeEtYoD8YQ7R/MIYlOBZ6EtG2INa5FwNu6sCXwZWs/1mSRsAW9jO6vWUtJXtK8c6V9N2x9Kgko60vf9Y59q0eTkRhI4H/kSkLD9ge+MsZ8d37Q/YPrEDdusWIv0KmJlbQDeO60wGlrM93Ei4wjAMl6cvFPqBf0mqiiyQtBXwrwbsnkg8oa+Wju8gCnByGW7fMWcvspVjiDTw/yf6ST/MQHoxl+EKmt6caXM34t60N1EpvTqRes5G0qslnS1prqR5kuZLmle93onAmdhq7B8ZlruBSyUdIGm/6qsJhyTNkTQtrZrnE+n3zzZheyJQ9jwL/cpewElp7xPgb4QgQy6r2D5d0gGwcPjzgrHeNBKpYX9LYPqQm+I0mmneB8D2nZIm214AzJZ0PXBAXXuSPkboEK/dGnyIPdCsfTPb96b+w3938yPkTgU+S3c0hOtwX/paimZkIFvZwPY/Je1C6Pt+ntin/VrD1+lLSvAs9BVVJaLtG4GNU38jDaajHkstH07XmwHkFCEtBSxP/C22Fk/9E9gpw24rj0taCrhB0leJNGhu1mkOccNdpE83UwFoUP8h0HT/4RKlIdyBh4dWpiiGGuwAHGP76SGVt4VRKHuehb6itU9PNeZUjsP+q4h06suIgqTpwE625436xrHtrtmimTsJWL6pgJ+Kkf5MBKNPEbqr37F9Z0P2JwOrMlhhqHYrxQj9h/Ntb9SAr28gUtiXsBg1hDMKkaYDnwM2BKZW55voV06VvPsD84C3AmsAp9h+Ta7tiUBZeRb6jdZH58bnVNqemypN10vXut320w2YPkLSXkQ7wm+BaZK+bTs7hZbSoNPTvxtdyUjaGziYCM5VGjS3lWK4/sOmnvL3IMaQTWGwv53WeK2r1XwqoZK1HbEVsTvwUEM+/RsDAxkOJLIRlzZku+8pwbPQb3iEfzeCpKGtLutK+gcw3/aDGaYb339SRJ+DiMKbSenUM8As24dm+NrKvsB6TbRSSDqf6I/sZP/hpk3pwrYi6dVE28eaxH110DDzjEKk59o+QTFp6DJi/u1vm/CZGGxQMZUo9Lq1Idt9TwmehX5jY0n/JG5ey6R/Q0PKRcQkji2ASv5vGyLIrSXpUNsnj/TGMRhu/yk3+H+KqPLc1PY9AAoh9GMlfcqjT50ZL78nb8+3ldlEJfPJRFr8SWJv9ULgsIaucZWkDWzf0pC9ik4VIlVZjQckvRX4I7FizMb2N1qPJX2d+KwL46AEz0JfYXtcFaqSVrb9txqXeA7wUtt/TnZWJSTvNicGLdcNnt8jxnfdSIw9W5MoGsphN6JH8OHqhO27k5LRRUATwbNqpTiPwXuIR7VryPYZki4gUohvIj7L6gHi40DbNodhBlE4dQ/h76AVYgadKkT6v6li/NPEXvs04qGoEywLvLBDtvuOEjwLE5VLgLYFwIHVq8CZeDCd+6uk2nufto8Gjm45da+kXH3eKa2Bs+VaD6VVbhM03UrxFNHbuTRRhdx06v1NDdurOEjS8TRYiJQKsV5i+1xidd+oXrOk+Qx8vpOJ4rem0vl9TwmehYlK3Zr8SyWdy8Aw7R3TueWAv9d2RvrSCC/l3MyeqvnauPHA0Obl0/Gjo79jZCS9iVhd/pQYAP14Ez62koqntiaC0uxUSLX8WO8bB40XIjkGg+9MMxmC4diu5d/PAH/utJJRP1FaVQoTEtUfPSXgnQyMiPobsKrtj2f68+mWw6nEje1W2x/MsLmAllmmrS8BU21nrz4lvYxIr1b7cA8D77d9cw1bVwB71XlvG9c4iBCbX8/2upJWA86wXVcBqLJ7e4cKkboyl7YwNmXlWSi0gW1LupvYO3sXcA9wZgN2Gy/eGO/+bybHAfvZ/hWApG2I9oct2zW0mPoL3wG8EpibrvlHSU1M9ulUIVKlxdyagTDRB1voIiV4FiYqbaVtJa1LNNfvTKyufkRkbjo1N3RJKd5YrgqcALarFHav8lR6AKoUoprytSOFSB38/SpkUoJnoS+RtA5wv+0n02ro5cBJtqt9yTe0afI24Apgu0qZR1JjVY9LcPHG3ZIOZKDKeFeiArdXOV3S94CVJH0E+CAxvSWXjhQiJSnIg4htAgO/JqQKGx9RVmiPsudZ6Esk3UDsbb0IOB/4CbCh7bfUtLcDMaB5K+DnwA+B422v1ZC/a7YcLjHFG5JWBg5hYA/4CuDgmm1AiwVJM2mZYWn74obsLlKIVPXXZti8mGiBOiWd2gXYxvYb87wt5FKCZ6EvqQqCFCOWnrA9q66+6BC7ywFvJ9K32xI9nmfbvqimvU2JSS0XDDn/ZuBB29fl+FsYjDowfzTZ6FQh0k22XzbkXCM6v4U8yjzPQr/ydCrz3x04N53Lri61/ZjtOba3J/YkryfEtetyJDBckckt9PBoKEk/He2r2/6NQifmj0IUIr2NVBFr+48MnpJTl4skvVfSpPT1booKUE9Q9jwL/coehJD24bbvkbQW9dV/hiWlJo9LX3VZoZqmMsT2vZJWybDbabYgpPlOA66mft/sYkGjzx+9soFLNFqIJOkRYo9ThH5w9bs7mdCk/UyO/UI+JW1b6EsUMyHPs93TA48l3Wn7xe2+1m2S+s1MIn39cuA84LRO9mjmkCTuVqYD80eT/c8ALyE+kyOIQqTTknJUx5C0Ya9+5v1OCZ6FvkTSKcTq6Ezg+7Zv67JLwyLpu8BfgC86/TEmIYZDgOfb/mg3/RsPkpYmgujXgENsH9NllxZB0rQ0tWZYUfWGAmhHCpHGuGYtsY9CPiV4FvoWSdOIm/oeRApsNrEaeKSrjrWQ0nvHA5sBN6TTGwPXAh/OkbvrNClovpX4jF9EyOp93/YfuunXcEg61/Z2qQ+zSodW2HbW7NdOFSKN47rZRXCFepTgWehrUp/cbsS+0a3Ai4Gjbc/qqmNDSKPCNkyHN9u+e8jrPZWek3QSMTbsfOCHtm/qskuNUPdzHm4FKGleA9Na2r5uYfFQgmehL5H0NmLF+WKineQHth+UtCxwi+0XddO/dum1m6SkZxnQWm29iTQ1N7UrtPs5txYiAXe1vLQCcKXtXRt2cej1e+r3YiJRqm0L/cqOwDdtX9560vbjkj7UJZ9y6KlqVtv92ubW7uc8B7iADhUijYNGpuMU2qesPAuFJYCywlg81Fh5Lo5CpGqKj4Ff2z4712Yhn7LyLPQlkmYAs4CXEkOaJwOPLanpxELPMocYH3cdwxQiEenc2kj6DrH1cFo6taekN+aOwCvkU4JnoV85htCiPYOQTXs/sG5XPcqjpOcWD219zra3S99H1TjOKPjaFnhpSxvTD4CeKRybyPTrvkWhQJp+Mtn2Atuz6dDkiyZQsKukL6XjNSRtVr1ue0b3vOsvJL1T0lGSviHpHa2vdfBzrqtudSewRsvx6ulcocuUlWehX3lc0lLEjMWvAg/Q2w+L3wGeJVYahwKPEAIPm3bTqX6ji2nQugVfKwC3SromHW8KXFvpB9t+WxPOFdqnBM9Cv7IbESz3Bj5FPLHv2FWPRmfzNAXmegjd3BT8C83SrTRo3crMLzXqRaExSvAs9CVJWH16+vch3fZnHDyd9GKrm/p0YiVaaJYqDVqJ8fd0GtT2ZZJWZSADcY3tB7vpUyHo5TRWodA2ae/wYEkPA7cDd0h6qNpL7GGOBs4GnifpcODXwJe761JfUqVBL5V0KTH6bdpiGKVWq+ArjSC7BngX8G7gakk7NelYoR6lz7PQV0jaj5jP+FHb96RzawPHAj+3/c1u+jcckiYBM4C/Am8g9scusX1rVx3rQyS9brTXbV+WYbvxfkxJNwIzq9Vmykj8wvbGubYLeZTgWegr0p7hTNsPDzk/HbioV0W0i8D34qMTadBhCpHeA9yVW4gkab7tjVqOJwE3tp4rdIey51noN6YMDZwAth+SNKUbDo2TSyTtCJzl8kTbMVIa9GvApcQKf5akz9r+cabpThUiXSDpQgYH5fMbsFvIpATPQr8x2t5SLwsN7AnsBzwj6QmWcIH1HuYLwKZD06BAbvDsVCGSge8R6WCA44gUf6HLlLRtoa+QtICBaR+DXgKm2u7l1Wehw3QqDSrpMiIVPKgfE/gH1O/H7Naos8LYlJVnoa+wPbnbPtRB0muHOz90Kkwhm06lQRut5m4ddSZpXstLKwBXNnmtQj3KyrNQ6AEk/azlcCqwGXCd7W275FJfIulI4GoG0qBXADNs79+A7cYKkSStCKxM90adFcagBM9CoQeRtDrwLdu9rIq0xNGpNOgwhUivAZooRCr0KCVtWyj0JvcT49QKDbAY0qCdKkQq9CgleBYKPYCkWQzon04CXgHM7Z5Hfccc4AI6lwadNCRN+xeKgltfU9K2hUIPIGn3lsNngN/ZLoUhSwhpcs/GDC5EmtfEXmqhNykrz0KhB7D9g277UMii9GNOMMrKs1DoASRtBRwMrEk81FYiCWt306/C+Cj9mBOPsvIsFHqDE4i5o9cBC7rsS2GclH7MiUtZeRYKPYCkq21v3m0/Cu1R+jEnLiV4Fgo9gKSvAJOBs4Anq/O2S8VtodCDlOBZKPQAkn41zGkXhaFCoTcpwbNQKBQKhTYpTbxomZnTAAABCklEQVSFQg8gaVVJJ0i6IB1vIOlD3farUCgMTwmehUJvcCJwIbBaOr4D2Ldr3hQKhVEpwbNQ6CKSqnaxVWyfDjwLYPsZSstKodCzlOBZKHSXanjyY5KeS9K3lTSDNEi5UCj0HkUkoVDoLkrf9wN+Cqwj6UpgOrBT17wqFAqjUqptC4UuIul+4Kh0OAlYmgioTwILbB810nsLhUL3KCvPQqG7TAaWZ2AFWrFsF3wpFArjpKw8C4UuMpygeKFQ6H1KwVCh0F2GrjgLhcISQFl5FgpdRNK/FQHxQmHJowTPQqFQKBTapKRtC4VCoVBokxI8C4VCoVBokxI8C4VCoVBokxI8C4VCoVBok/8FJqPfWmd2YU0AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Correlation Plot , non of the variables seems highly correlated with dependent or independent feature\n",
    "sns.heatmap(data_features[['return','item_price','Days_For_Delivery','Age_Customer','Tenure_Customer_days','Day_Delivery','Month_Delivery','Year_Delivery','top_item_size_label','top_item_color_label','top_brand_id_label','user_id_label']].corr())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "id": "64jPY1R42EeO"
   },
   "outputs": [],
   "source": [
    "#Creating Dependent and independent data\n",
    "X=data_features.drop(['return'],axis=1)\n",
    "Y=data_features[['return']].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "id": "R_FnVx_82EeO"
   },
   "outputs": [],
   "source": [
    "#Splitting the data with 70-30 split and stratified sampling to get equal ratio of return class\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=0,stratify=Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "id": "_j9W2grx2EeP"
   },
   "outputs": [],
   "source": [
    "#Using Recursive feature elimination with cross-validation to get most important features out of all features\n",
    "cv_estimator = RandomForestClassifier(random_state =42,n_jobs=-1)\n",
    "cv_estimator.fit(X_train, y_train)\n",
    "cv_selector = RFECV(cv_estimator,cv= 5, step=1,scoring='accuracy')\n",
    "cv_selector = cv_selector.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "id": "2ZT0qAEy7oMT"
   },
   "outputs": [],
   "source": [
    "#Creating list of features which are most important\n",
    "rfecv_mask=cv_selector.get_support()\n",
    "rfecv_features = []\n",
    "for bool, feature in zip(rfecv_mask, X_train.columns):\n",
    "    if bool:\n",
    "        rfecv_features.append(feature)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "4dGQd5X37umo",
    "outputId": "8aeefc0b-f2b5-41da-840d-57fd3639f255"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['item_price',\n",
       " 'Missing_Delivery_Date',\n",
       " 'Days_For_Delivery',\n",
       " 'Age_Customer',\n",
       " 'Tenure_Customer_days',\n",
       " 'Day_Delivery',\n",
       " 'Month_Delivery',\n",
       " 'top_item_size_label',\n",
       " 'top_item_color_label',\n",
       " 'top_brand_id_label',\n",
       " 'user_id_label',\n",
       " 'user_state_1002',\n",
       " 'user_state_1008',\n",
       " 'user_state_1010']"
      ]
     },
     "execution_count": 51,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Most important features\n",
    "rfecv_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 497
    },
    "id": "c2SjAzWhJrz1",
    "outputId": "eea7a583-f52e-420d-8fd1-00a457a88ddb"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Feature Importance Graph\n",
    "n_features = X_train.shape[1]\n",
    "plt.figure(figsize=(8,8))\n",
    "plt.barh(range(n_features), cv_estimator.feature_importances_, align='center') \n",
    "plt.yticks(np.arange(n_features), X_train.columns.values) \n",
    "plt.xlabel('Feature importance')\n",
    "plt.ylabel('Feature')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "id": "8QgnnPEi76iX"
   },
   "outputs": [],
   "source": [
    "#Only picking best features\n",
    "x_train_selected=X_train[rfecv_features]\n",
    "x_test_selected=X_test[rfecv_features]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Qw0REsuiuzYU"
   },
   "source": [
    "# Model Building with Hyperparameter Tunning - Using Random Forest due to time constraints , since random forest isn't sensitive to outliers and missing values . Also it doesn't require feature scaling."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "id": "HJ1Ejs9h-0E7"
   },
   "outputs": [],
   "source": [
    "# Number of trees in random forest\n",
    "n_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n",
    "# Number of features to consider at every split\n",
    "max_features = ['auto', 'sqrt']\n",
    "# Maximum number of levels in tree\n",
    "max_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\n",
    "max_depth.append(None)\n",
    "# Minimum number of samples required to split a node\n",
    "min_samples_split = [2, 5, 10]\n",
    "# Minimum number of samples required at each leaf node\n",
    "min_samples_leaf = [1, 2, 4]\n",
    "# Method of selecting samples for training each tree\n",
    "bootstrap = [True, False]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "id": "_OuNLVdV-6YR"
   },
   "outputs": [],
   "source": [
    "# Create the random grid\n",
    "random_grid = {'n_estimators': n_estimators,\n",
    "               'max_features': max_features,\n",
    "               'max_depth': max_depth,\n",
    "               'min_samples_split': min_samples_split,\n",
    "               'min_samples_leaf': min_samples_leaf,\n",
    "               'bootstrap': bootstrap}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "EEnXA6NK-85x",
    "outputId": "f694eb20-ba39-427d-cdb3-e5a62bf66008"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'bootstrap': [True, False],\n",
       " 'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, None],\n",
       " 'max_features': ['auto', 'sqrt'],\n",
       " 'min_samples_leaf': [1, 2, 4],\n",
       " 'min_samples_split': [2, 5, 10],\n",
       " 'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]}"
      ]
     },
     "execution_count": 68,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "id": "YO3zOIhz-97I"
   },
   "outputs": [],
   "source": [
    "#Calling Random Forest Classifier\n",
    "rf=RandomForestClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "id": "zkK27C3m_QZR"
   },
   "outputs": [],
   "source": [
    "#Creating Randomized Search CV object\n",
    "rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "aq60Zd14_XLA",
    "outputId": "28185265-ff75-414e-81e1-7f0ad7db4a43"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 100 candidates, totalling 300 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  37 tasks      | elapsed: 20.8min\n",
      "[Parallel(n_jobs=-1)]: Done 158 tasks      | elapsed: 95.0min\n",
      "[Parallel(n_jobs=-1)]: Done 300 out of 300 | elapsed: 173.4min finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomizedSearchCV(cv=3, error_score=nan,\n",
       "                   estimator=RandomForestClassifier(bootstrap=True,\n",
       "                                                    ccp_alpha=0.0,\n",
       "                                                    class_weight=None,\n",
       "                                                    criterion='gini',\n",
       "                                                    max_depth=None,\n",
       "                                                    max_features='auto',\n",
       "                                                    max_leaf_nodes=None,\n",
       "                                                    max_samples=None,\n",
       "                                                    min_impurity_decrease=0.0,\n",
       "                                                    min_impurity_split=None,\n",
       "                                                    min_samples_leaf=1,\n",
       "                                                    min_samples_split=2,\n",
       "                                                    min_weight_fraction_leaf=0.0,\n",
       "                                                    n_estimators=100,\n",
       "                                                    n_jobs...\n",
       "                   param_distributions={'bootstrap': [True, False],\n",
       "                                        'max_depth': [10, 20, 30, 40, 50, 60,\n",
       "                                                      70, 80, 90, 100, 110,\n",
       "                                                      None],\n",
       "                                        'max_features': ['auto', 'sqrt'],\n",
       "                                        'min_samples_leaf': [1, 2, 4],\n",
       "                                        'min_samples_split': [2, 5, 10],\n",
       "                                        'n_estimators': [200, 400, 600, 800,\n",
       "                                                         1000, 1200, 1400, 1600,\n",
       "                                                         1800, 2000]},\n",
       "                   pre_dispatch='2*n_jobs', random_state=42, refit=True,\n",
       "                   return_train_score=False, scoring=None, verbose=2)"
      ]
     },
     "execution_count": 72,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Fitting Random Forest Classifier\n",
    "rf_random.fit(x_train_selected, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "lRYfM6vSnYLE",
    "outputId": "1b83e243-b1c1-4786-f12a-cd9bb2c55f30"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'bootstrap': True,\n",
       " 'max_depth': 10,\n",
       " 'max_features': 'sqrt',\n",
       " 'min_samples_leaf': 2,\n",
       " 'min_samples_split': 5,\n",
       " 'n_estimators': 1000}"
      ]
     },
     "execution_count": 76,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Best params obtained\n",
    "rf_random.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 497
    },
    "id": "H45_bi5Hvg73",
    "outputId": "e9b5fcc4-e0aa-4e5d-e381-fe03b4e06961"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light",
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Feature Importance Graph , here we could also remove user state dummy variables because they are not important\n",
    "n_features = x_test_selected.shape[1]\n",
    "plt.figure(figsize=(8,8))\n",
    "plt.barh(range(n_features), rf_random.best_estimator_.feature_importances_, align='center') \n",
    "plt.yticks(np.arange(n_features), x_test_selected.columns.values) \n",
    "plt.xlabel('Feature importance')\n",
    "plt.ylabel('Feature')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "JDR0fzYmwIO4"
   },
   "source": [
    "# Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "OLriqz--xjVV",
    "outputId": "58419c89-a869-45f4-bf01-05989a42ec3c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix : \n",
      " [[23249  7049]\n",
      " [ 3996 21667]]\n",
      "Accuracy : \n",
      " 0.8026304033165955\n",
      "Recall : \n",
      " [0.76734438 0.84428944]\n",
      "Precision : \n",
      " [0.85333089 0.75452709]\n",
      "F1 Score : \n",
      " [0.80805658 0.7968885 ]\n",
      "AUC-ROC Score : \n",
      " 0.8058169115567397\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.85      0.77      0.81     30298\n",
      "           1       0.75      0.84      0.80     25663\n",
      "\n",
      "    accuracy                           0.80     55961\n",
      "   macro avg       0.80      0.81      0.80     55961\n",
      "weighted avg       0.81      0.80      0.80     55961\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Train Data Evaluation , using default 0.5 cutoff since in our case these are balanced classes\n",
    "\n",
    "#Predicting Train classes\n",
    "y_pred_train=rf_random.best_estimator_.predict(x_train_selected)\n",
    "\n",
    "# Confusion Matrix\n",
    "print(\"Confusion Matrix : \\n\",confusion_matrix(y_train, y_pred_train))\n",
    "# Accuracy\n",
    "print(\"Accuracy : \\n\",accuracy_score(y_train, y_pred_train))\n",
    "# Recall\n",
    "print(\"Recall : \\n\",recall_score(y_train, y_pred_train, average=None))\n",
    "# Precision\n",
    "print(\"Precision : \\n\",precision_score(y_train, y_pred_train, average=None))\n",
    "# F1-Score\n",
    "print(\"F1 Score : \\n\",f1_score(y_train, y_pred_train, average=None))\n",
    "#AUC-ROC Curve\n",
    "print(\"AUC-ROC Score : \\n\",roc_auc_score(y_train, y_pred_train, average=None))\n",
    "#Classification Report\n",
    "print(classification_report(y_train, y_pred_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "7a3nllF8zfvv",
    "outputId": "312f077e-e73c-4ef4-e8b3-6489dc1e78de"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix : \n",
      " [[9824 3161]\n",
      " [1874 9125]]\n",
      "Accuracy : \n",
      " 0.7900683789192795\n",
      "Recall : \n",
      " [0.75656527 0.82962087]\n",
      "Precision : \n",
      " [0.83980168 0.74271529]\n",
      "F1 Score : \n",
      " [0.79601345 0.78376637]\n",
      "AUC-ROC Score : \n",
      " 0.7930930711207234\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.76      0.80     12985\n",
      "           1       0.74      0.83      0.78     10999\n",
      "\n",
      "    accuracy                           0.79     23984\n",
      "   macro avg       0.79      0.79      0.79     23984\n",
      "weighted avg       0.80      0.79      0.79     23984\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Test Data Evaluation\n",
    "\n",
    "#Predicting Train classes\n",
    "y_pred_test=rf_random.best_estimator_.predict(x_test_selected)\n",
    "\n",
    "# Confusion Matrix\n",
    "print(\"Confusion Matrix : \\n\",confusion_matrix(y_test, y_pred_test))\n",
    "# Accuracy\n",
    "print(\"Accuracy : \\n\",accuracy_score(y_test, y_pred_test))\n",
    "# Recall\n",
    "print(\"Recall : \\n\",recall_score(y_test, y_pred_test, average=None))\n",
    "# Precision\n",
    "print(\"Precision : \\n\",precision_score(y_test, y_pred_test, average=None))\n",
    "# F1-Score\n",
    "print(\"F1 Score : \\n\",f1_score(y_test, y_pred_test, average=None))\n",
    "#AUC-ROC Curve\n",
    "print(\"AUC-ROC Score : \\n\",roc_auc_score(y_test, y_pred_test, average=None))\n",
    "#Classification Report\n",
    "print(classification_report(y_test, y_pred_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "i9HXomrV4T26"
   },
   "source": [
    "# Saving Model For Scoring"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {
    "id": "aS8DNWGS4XSQ"
   },
   "outputs": [],
   "source": [
    "filename = path+'Model/return_classifier.sav'\n",
    "pickle.dump(rf_random.best_estimator_, open(filename, 'wb'))"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "Untitled.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
